<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于概率模型的聚类算法</title>
      <link href="2021/01/01/%E5%9F%BA%E4%BA%8E%E6%A6%82%E7%8E%87%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95/"/>
      <url>2021/01/01/%E5%9F%BA%E4%BA%8E%E6%A6%82%E7%8E%87%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="基于概率模型的聚类算法"><a href="#基于概率模型的聚类算法" class="headerlink" title="基于概率模型的聚类算法"></a>基于概率模型的聚类算法</h2><hr><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h4><p><strong>概率模型聚类</strong>这种方法的<strong>优点</strong>就是对”类“的划分不那么”坚硬“，而是以概率形式表现，每一类的特征也可以用参数来表达；但<strong>缺点</strong>就是执行效率不高，特别是分布数量很多并且数据量很少的时候。其中最典型、也最常用的方法就是高斯混合模型<strong>GMM</strong>，Gaussian Mixture Models）。<strong>基于神经网络模型</strong>的方法主要就是指<strong>SOM</strong>（Self Organized Maps）了，也是我所知的唯一一个非监督学习的神经网络了。</p><h4 id="2-极大似然估计"><a href="#2-极大似然估计" class="headerlink" title="2.极大似然估计"></a>2.极大似然估计</h4><p>$$<br>\frac{\sqrt{1+abc}}{\sqrt{1-abc}}<br>$$</p><ol><li><p>极大似然的公式</p><p><img src="https://cdn.jsdelivr.net/gh/liao110/image@main/suanfa/1.png"></p></li><li><p>极大似然估计</p><p>上面的公式显然有点枯燥难懂！所以先看一下这个例子：</p><p><img src="https://cdn.jsdelivr.net/gh/liao110/image@main/li.png" alt="li"></p><p>总而言之，最大似然估计的目的就是：利用<strong>已知的样本结果</strong>，反推<strong>最有可能</strong>（最大概率）导致这样结果的<strong>参数值</strong>。</p></li></ol><p>   之后我们再反过来看一下这个似然公式：</p><p>   <img src="https://cdn.jsdelivr.net/gh/liao110/image@main/suanfa/1.png" alt="image-1"></p><p>   p(X；θ)函数是样本满足的概率密度函数，θ是函数的参数，x是自变量。</p><p>   <strong>我们需要根据已知的实验结果x的值来估算出概率密度函数p()的参数θ的值。</strong></p><ol start="3"><li><p>最大似然估计的特点：</p><p> 1.比其他估计方法更加简单；</p><p>2.收敛性：无偏或者渐近无偏，当样本数目增加时，收敛性质会更好；</p><p>3.如果假设的类条件概率模型正确，则通常能获得较好的结果。但如果假设模型出现偏差，将导致非常差的估计结果。</p></li></ol><h4 id="3简单EM算法"><a href="#3简单EM算法" class="headerlink" title="3简单EM算法"></a>3简单EM算法</h4><ol><li><p>一个简单的例子</p><ol><li><p>假设现在有两枚<strong>质地不均匀硬币1和2</strong>（所以抛硬币正反面的概率不会是1:1），,随机抛掷后正面朝上概率分别为P1，P2。为了估计这两个概率，做实验，每次取一枚硬币，连掷5下，记录下结果，如下：</p><p><img src="https://cdn.jsdelivr.net/gh/liao110/image@main/coin.png" alt="coin"></p><p>可以很容易地估计出P1(1号正面的概率)和P2(2号正面的概率)，如下：</p><p>P1 = （3+1+2）/ 15 = 0.4<br>P2= （2+3）/10 = 0.5</p><p>利用极大似然估计：</p><p>L(θ)=p^6*(1-p)^9    求最大值可得出p1=0.4</p><p>同理p2=0.5；</p></li><li><p>加大难度</p><p>假设我们不知道每个结果属于哪一个硬币，只知道有两个硬币抛出了这些结果，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/liao110/image@main/coin2.jpg" alt="coin2"></p></li><li></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 模型聚类算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 聚类算法 概率模型聚类算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库实验一</title>
      <link href="2020/12/08/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E4%B8%80/"/>
      <url>2020/12/08/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="模式对象和用户权限管理"><a href="#模式对象和用户权限管理" class="headerlink" title="模式对象和用户权限管理"></a>模式对象和用户权限管理</h2><hr><h4 id="1-索引，写出相应的SQL命-令"><a href="#1-索引，写出相应的SQL命-令" class="headerlink" title="1. 索引，写出相应的SQL命 令"></a>1. 索引，写出相应的SQL命 令</h4><ol><li><p>创建student1表，并为student1表建立主键。(“student1”的结构与“a_db.学生”表一样)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> student1<span class="token punctuation">(</span>学号 varchar2<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token comment">--默认为type</span> 姓名 varchar2<span class="token punctuation">(</span><span class="token number">4</span> <span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span> 专业 varchar2<span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>注册日期 <span class="token keyword">date</span><span class="token punctuation">,</span>状态 varchar2<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">Primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>学号<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>为studen1表的姓名创建索引obj1_1</p><a id="more"></a><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">index</span> obj1_1 <span class="token keyword">on</span> student1<span class="token punctuation">(</span>姓名<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>为表中的注册日期创建降序索引为obj1_2，性别创建位图索引 student_gender_index ， “性别”与“姓名”创建组合索引，索引名为“obj1_3” </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">index</span> obj1_2 <span class="token keyword">on</span> student1<span class="token punctuation">(</span>注册日期 <span class="token keyword">desc</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> student_gender_index  <span class="token keyword">on</span> student1<span class="token punctuation">(</span>性别<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> obj1_3 <span class="token keyword">on</span> student1<span class="token punctuation">(</span>姓名<span class="token punctuation">,</span>性别<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看索引</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> user_indexes <span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token string">'student1'</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> user_ind_columns <span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token string">'student1'</span><span class="token punctuation">;</span><span class="token comment">--删除索引</span><span class="token keyword">drop</span> <span class="token keyword">index</span> student_gender_index<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="2-同义词，写出相应的sql命令"><a href="#2-同义词，写出相应的sql命令" class="headerlink" title="2. 同义词，写出相应的sql命令"></a>2. 同义词，写出相应的sql命令</h4><ol><li><p>创建student1表、 obj1_3 、 obj1_5 的同义词，名为obj1_4、 obj1_5 、 st1。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">Create</span>  synonym obj1_4 <span class="token keyword">from</span> student<span class="token punctuation">;</span><span class="token keyword">create</span> synonym obj1_5 <span class="token keyword">from</span> obj1_3<span class="token punctuation">;</span><span class="token keyword">create</span> synonym stl <span class="token keyword">from</span> obj1_5<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>创建某Oracle对象的公共同义词，公共同义词的命名规则：字符串“obj1_”后面跟上你的学号。（Oracle对象任意，在自己的计算机上完成）</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">public</span> synonym obj1_201805660111 <span class="token keyword">for</span> scott<span class="token punctuation">.</span>emp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看同义词</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> synonym_name<span class="token punctuation">,</span>table_name<span class="token punctuation">,</span>table_over <span class="token keyword">from</span> user_syonoym<span class="token punctuation">;</span><span class="token comment">--删除同义词</span><span class="token keyword">drop</span> synonym stl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="3-序列，写出相应的sql命令"><a href="#3-序列，写出相应的sql命令" class="headerlink" title="3. 序列，写出相应的sql命令"></a>3. 序列，写出相应的sql命令</h4><ol><li><p>序列基本语法</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> sequence  序列名称<span class="token keyword">start</span> <span class="token keyword">with</span> 从几开始increment <span class="token keyword">by</span> 每次增长多少<span class="token punctuation">[</span>maxvalue 最大值<span class="token punctuation">]</span> <span class="token operator">|</span> nomaxvalue<span class="token punctuation">[</span>minvalue 最小值<span class="token punctuation">]</span> <span class="token operator">|</span> nominvalue<span class="token keyword">cycle</span> <span class="token operator">|</span> nocycle <span class="token comment">--是否自动循环</span><span class="token punctuation">[</span>cache 缓存数量<span class="token punctuation">]</span> <span class="token operator">|</span> nocathe<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建序列，该序列起始值50，步长为10，不缓冲，序列名为“obj1_6”。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> sequence obj1_6<span class="token keyword">start</span> <span class="token keyword">with</span> <span class="token number">50</span>increment <span class="token keyword">by</span> <span class="token number">10</span>nocache<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建序列，该序列最大值无限制，最小值为1，步长为1，序列名为“obj1_7”。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> sequence obj1_7<span class="token keyword">start</span> <span class="token keyword">with</span> <span class="token number">1</span>increment <span class="token number">1</span>nomaxvalue<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建序列，该序列起始值为1000，步长为2，最大值为10000，不可循环，序列名为“seq_1”。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">craete sequence seq_1<span class="token keyword">start</span> <span class="token keyword">with</span> <span class="token number">1000</span>increment <span class="token keyword">by</span> <span class="token number">2</span>maxvalue <span class="token number">10000</span>nocycle<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查看序列</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span>  all_sequence <span class="token keyword">where</span> sequence_owner<span class="token operator">=</span><span class="token string">'A201805660111'</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> user_sequence<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>引用序列:向DEPT表中插入三条记录，利用序列obj1_6生成部门编号。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> dept <span class="token keyword">values</span><span class="token punctuation">(</span>obj1_6<span class="token punctuation">,</span>nextval<span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> dept <span class="token keyword">values</span><span class="token punctuation">(</span>obj1_6<span class="token punctuation">,</span>nextval<span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> dept <span class="token keyword">values</span><span class="token punctuation">(</span>obj1_6<span class="token punctuation">,</span>nextval<span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>修改序列: 修改序列“obj1_6”，将该序列最大值设为“82000”，最小值设为“10”，步长设为“5”。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> sequence obj1_6 maxvalue <span class="token number">82000</span> minvalue <span class="token number">10</span> increment <span class="token keyword">by</span> <span class="token number">5</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改序列:  修改序列“obj1_7”，将该序列最大值设为“1000”。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> sequence obj1_7 maxvalue <span class="token number">1000</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>删除序列seq_1</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> sequence seq_1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h4 id="4-用户，写出相应的sql命令"><a href="#4-用户，写出相应的sql命令" class="headerlink" title="4. 用户，写出相应的sql命令"></a>4. 用户，写出相应的sql命令</h4><ol><li><p>创建一个用户。注意：如果用户名的命名违背了公俗良序原则，将给予某些处罚。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">user</span> a indentify <span class="token keyword">by</span> <span class="token number">123456</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>给用户一些权限</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">grant</span> <span class="token keyword">connect</span><span class="token punctuation">,</span> resource <span class="token keyword">to</span> a<span class="token punctuation">;</span><span class="token keyword">grant</span> <span class="token keyword">create</span> <span class="token keyword">session</span> <span class="token keyword">to</span> a<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>新开一个会话，以新创建的用户身份连接并对scott中的emp表进行查询、删除操作。如果权限不够，则授予相应权限。最后，回滚事务.</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">grant</span> <span class="token keyword">select</span><span class="token punctuation">,</span><span class="token keyword">delete</span> <span class="token keyword">on</span> scott<span class="token punctuation">.</span>emp <span class="token keyword">to</span> a<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> scott<span class="token punctuation">.</span>emp <span class="token keyword">where</span> empno<span class="token operator">=</span><span class="token number">7369</span><span class="token punctuation">;</span><span class="token keyword">delete</span> <span class="token keyword">from</span> scott<span class="token punctuation">.</span>emp <span class="token keyword">where</span> empno<span class="token operator">=</span><span class="token number">7369</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> scott<span class="token punctuation">.</span>emp <span class="token keyword">where</span> empno<span class="token operator">=</span><span class="token number">7369</span><span class="token punctuation">;</span><span class="token keyword">rollback</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> scott<span class="token punctuation">.</span>emp <span class="token keyword">where</span> empno<span class="token operator">=</span><span class="token number">7369</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改该用户的口令，然后用新口令重新连接。 </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">user</span> a identified <span class="token keyword">by</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token comment">-- 封锁该用户的账号，然后解锁。</span><span class="token keyword">alter</span> <span class="token keyword">user</span> a account <span class="token keyword">lock</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">user</span> a account <span class="token keyword">unlock</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查询用户和权限信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dba_users<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> user_sys_privs<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> user_tab_privs<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> user_role_privs<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> session_privs<span class="token punctuation">;</span><span class="token comment">--删除用户</span><span class="token keyword">drop</span> <span class="token keyword">user</span> a20170596429<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="5-视图，针对a-db模式中的表，创建视图，视图名依次命名为obj1-10、obj1-11、…"><a href="#5-视图，针对a-db模式中的表，创建视图，视图名依次命名为obj1-10、obj1-11、…" class="headerlink" title="5. 视图，针对a_db模式中的表，创建视图，视图名依次命名为obj1_10、obj1_11、…"></a>5. 视图，针对a_db模式中的表，创建视图，视图名依次命名为obj1_10、obj1_11、…</h4><ol><li><p>对选修C13课程的学生，按分数跳跃式排名（可以并列），显示名次与学号，按名次、学号升序排列。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--跳跃排序，以a，b为一组，组内再以b排序</span><span class="token comment">--rank() over (PARTITION BY a,b order by a desc)</span><span class="token comment">--连续排序，如果有两个1，则下一个为2</span><span class="token comment">--dense_rank() over (PARTITION BY a,b order by a desc)</span><span class="token comment">--顺序排序，及12345...</span><span class="token comment">--row_number() over (PARTITION BY a,b order by a desc)</span><span class="token keyword">select</span> 学号<span class="token punctuation">,</span>课程号<span class="token punctuation">,</span>分数<span class="token punctuation">,</span>绩点<span class="token punctuation">,</span>rank<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">order</span> <span class="token keyword">by</span> nvl<span class="token punctuation">(</span><span class="token string">"分数"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">desc</span><span class="token punctuation">)</span> 名次 <span class="token keyword">from</span> a_db<span class="token punctuation">.</span>成绩 <span class="token keyword">where</span> 课程号<span class="token operator">=</span><span class="token string">'C13'</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查询每门课程考试成绩第一名(可以并列)的 生的学号与课程号，按课程号升序排列。 </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 课程号<span class="token punctuation">,</span>学号<span class="token punctuation">,</span>分数<span class="token punctuation">,</span>姓名 <span class="token keyword">from</span> a_db<span class="token punctuation">.</span>成绩 b<span class="token keyword">natural</span> <span class="token keyword">join</span> a_db<span class="token punctuation">.</span>学生 a<span class="token keyword">where</span> 分数 <span class="token operator">in</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>分数<span class="token punctuation">)</span> <span class="token keyword">from</span> a_db<span class="token punctuation">.</span>成绩 <span class="token keyword">natural</span> <span class="token keyword">join</span> a_db<span class="token punctuation">.</span>学生 <span class="token keyword">where</span> 课程号<span class="token operator">=</span>b<span class="token punctuation">.</span>课程号<span class="token punctuation">)</span> <span class="token keyword">order</span> <span class="token keyword">by</span> 课程号<span class="token punctuation">;</span><span class="token comment">---其他方法</span>使用临时变量<span class="token punctuation">,</span>定义一个自增序列<span class="token keyword">select</span> <span class="token keyword">distinct</span> 课程号，姓名   <span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token keyword">select</span> 成绩<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>rank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">by</span> 课程号   <span class="token keyword">order</span> <span class="token keyword">by</span> 分数 <span class="token keyword">DESC</span> NULLS <span class="token keyword">LAST</span><span class="token punctuation">)</span>RK   <span class="token keyword">from</span> a_db<span class="token punctuation">.</span>成绩<span class="token punctuation">)</span>R <span class="token keyword">left</span> <span class="token keyword">join</span> a_db<span class="token punctuation">.</span>学生 <span class="token keyword">on</span> R<span class="token punctuation">.</span>学号<span class="token operator">=</span>学生<span class="token punctuation">.</span>学号   <span class="token keyword">where</span> rk<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">order</span> <span class="token keyword">by</span> 课程号<span class="token punctuation">,</span>姓名 <span class="token keyword">asc</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>按平均分数对课程连续排名(可以并列)，显示名次、课程号与平均分数(保留2位小数)，按名次、课程号升序排列。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 课程号<span class="token punctuation">,</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token function">avg</span><span class="token punctuation">(</span>分数<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> 平均分<span class="token punctuation">,</span>dense_rank<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token function">avg</span><span class="token punctuation">(</span>分数<span class="token punctuation">)</span><span class="token punctuation">)</span> 名次 <span class="token keyword">from</span> a_db<span class="token punctuation">.</span>成绩 <span class="token keyword">natural</span> <span class="token keyword">join</span> a_db<span class="token punctuation">.</span>课程<span class="token keyword">group</span> <span class="token keyword">by</span> 课程号<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>查询每门课程的课程号，以及每门课程考试成绩第一名（可以并列）的学生的姓名，按课程号与姓名升序排列。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 课程号<span class="token punctuation">,</span>姓名 <span class="token keyword">from</span> a_db<span class="token punctuation">.</span>成绩 b<span class="token keyword">natural</span> <span class="token keyword">join</span> a_db<span class="token punctuation">.</span>学生 a <span class="token keyword">where</span> 分数 <span class="token operator">in</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>分数<span class="token punctuation">)</span> <span class="token keyword">from</span> a_db<span class="token punctuation">.</span>成绩 <span class="token keyword">natural</span> <span class="token keyword">join</span> a_db<span class="token punctuation">.</span>学生 <span class="token keyword">where</span> 课程号<span class="token operator">=</span>b<span class="token punctuation">.</span>课程号<span class="token punctuation">)</span> <span class="token keyword">order</span> <span class="token keyword">by</span> 课程号<span class="token punctuation">,</span>姓名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>列出工资在3500到5000之间的员工的姓名，但只取姓名的前5个字符，不足5个则以*补足，按姓名升序排列</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> rpad<span class="token punctuation">(</span>ename<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token keyword">as</span> 姓名   <span class="token keyword">from</span> a_db<span class="token punctuation">.</span>emp <span class="token keyword">where</span> sal <span class="token operator">between</span> <span class="token number">3500</span> <span class="token operator">and</span> <span class="token number">5000</span>   <span class="token keyword">order</span> <span class="token keyword">by</span> ename<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>补充笔记</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*1、top限制*/</span><span class="token comment">-- 查询年龄最大的三个学生的姓名、年龄、所在系</span><span class="token keyword">SELECT</span> <span class="token keyword">top</span> <span class="token number">3</span> Sname<span class="token punctuation">,</span> Sage<span class="token punctuation">,</span> Sdept <span class="token keyword">FROM</span> student <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> Sage <span class="token keyword">DESC</span><span class="token comment">-- 查询年龄最大的三个学生的姓名、年龄、所在系（包括年龄并列第3名）</span><span class="token keyword">SELECT</span> <span class="token keyword">top</span> <span class="token number">3</span> <span class="token keyword">WITH</span> TIES Sname<span class="token punctuation">,</span> Sage<span class="token punctuation">,</span> Sdept <span class="token keyword">FROM</span> student <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> Sage <span class="token keyword">DESC</span><span class="token comment">-- 查询大学英语考试成绩最高的的前三名学生的姓名、所在系和大学英语考试成绩</span><span class="token keyword">SELECT</span> <span class="token keyword">top</span> <span class="token number">3</span> <span class="token keyword">WITH</span> TIES Sname<span class="token punctuation">,</span>Sdept<span class="token punctuation">,</span>Cname<span class="token punctuation">,</span>Grade <span class="token keyword">FROM</span> student s <span class="token keyword">JOIN</span> sc <span class="token keyword">ON</span> s<span class="token punctuation">.</span>Sno <span class="token operator">=</span> sc<span class="token punctuation">.</span>Sno <span class="token keyword">JOIN</span> course <span class="token keyword">ON</span> course<span class="token punctuation">.</span>Cno <span class="token operator">=</span> sc<span class="token punctuation">.</span>Cno <span class="token keyword">WHERE</span> Cname <span class="token operator">=</span> <span class="token string">'大学英语'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> Grade <span class="token keyword">DESC</span><span class="token comment">-- 查询选课人数最少的两门课程（不包括没有人选的课程），列出课程号和选课人数</span><span class="token keyword">SELECT</span> <span class="token keyword">top</span> <span class="token number">2</span> <span class="token keyword">WITH</span> TIES Cno<span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token keyword">AS</span> 选课人数 <span class="token keyword">FROM</span> sc  <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> Cno <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">ASC</span><span class="token comment">-- 查询计算机系选课门数超过两门的学生中，考试平均成绩最高的前两名（包括并列的情况）学生的序号、选课门数和平均成绩</span><span class="token keyword">SELECT</span> <span class="token keyword">top</span> <span class="token number">2</span> <span class="token keyword">WITH</span> TIES s<span class="token punctuation">.</span>Sno<span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span>Grade<span class="token punctuation">)</span><span class="token keyword">AS</span> 平均成绩 <span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> 选课门数 <span class="token keyword">FROM</span> student s <span class="token keyword">JOIN</span> sc <span class="token keyword">ON</span> s<span class="token punctuation">.</span>Sno <span class="token operator">=</span> sc<span class="token punctuation">.</span>Sno<span class="token keyword">WHERE</span> Sdept <span class="token operator">=</span> <span class="token string">'计算机系'</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> s<span class="token punctuation">.</span>Sno <span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token function">AVG</span><span class="token punctuation">(</span>Grade<span class="token punctuation">)</span> <span class="token keyword">DESC</span><span class="token comment">/*2、将查询结果保存到表中*/</span><span class="token comment">-- 查询计算机系学生的学号、姓名、性别和年龄，并将查询结果保存到新表student_CS中</span><span class="token keyword">SELECT</span> Sno<span class="token punctuation">,</span>Sname<span class="token punctuation">,</span>Ssex<span class="token punctuation">,</span>Sage <span class="token keyword">INTO</span> student_CS <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> Sdept <span class="token operator">=</span> <span class="token string">'计算机系'</span><span class="token comment">-- 查询计算机系学生的学号、姓名、性别和年龄，并将查询结果保存到临时表student_CS_Two中</span><span class="token keyword">SELECT</span> Sno<span class="token punctuation">,</span>Sname<span class="token punctuation">,</span>Ssex<span class="token punctuation">,</span>Sage <span class="token keyword">INTO</span> <span class="token comment">#student_CS_Two FROM student WHERE Sdept = '计算机系'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 复习 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> PL/SQL程序基础1 </tag>
            
            <tag> sqli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>触发器实验</title>
      <link href="2020/12/06/%E8%A7%A6%E5%8F%91%E5%99%A8%E5%AE%9E%E9%AA%8C/"/>
      <url>2020/12/06/%E8%A7%A6%E5%8F%91%E5%99%A8%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><hr><ol><li><p>创建一个emp1表的插入或修改触发器，功能是：员工的工资不能超过自己的经理的工资，超过则报错误。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"> <span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">trigger</span> obj5_1 before <span class="token keyword">insert</span> <span class="token operator">or</span> <span class="token keyword">update</span> <span class="token keyword">on</span> emp1 <span class="token keyword">for each row</span><span class="token punctuation">;</span> <span class="token keyword">declare</span> v emp1<span class="token punctuation">.</span>sal<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">;</span>  PRAGMA AUTONOMOUS_TRANSACTION<span class="token punctuation">;</span>  <span class="token keyword">begin</span><span class="token keyword">select</span> sal <span class="token keyword">into</span> v <span class="token keyword">from</span> emp1 <span class="token keyword">where</span> deptno<span class="token operator">=</span> :new<span class="token punctuation">.</span>deptno <span class="token operator">and</span> job<span class="token operator">=</span><span class="token string">'manager'</span>  <span class="token keyword">case</span>  <span class="token keyword">when</span> INSERTING <span class="token keyword">then</span>      <span class="token keyword">if</span> :new<span class="token punctuation">.</span>sal<span class="token operator">&gt;</span>v_sa        <span class="token keyword">then</span>         raise_application_error <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20001</span><span class="token punctuation">,</span><span class="token string">'员工工资不能高于自己的经理工资'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>     <span class="token keyword">when</span> UPDATING <span class="token keyword">then</span>     <span class="token keyword">if</span> :new<span class="token punctuation">.</span>sal<span class="token operator">&gt;</span>v_sa <span class="token keyword">then</span>     raise_application_error <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20001</span><span class="token punctuation">,</span><span class="token string">'员工工资不能高于自己的经理工资'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>     <span class="token keyword">end</span> <span class="token keyword">case</span><span class="token punctuation">;</span> <span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><a id="more"></a></li><li><p>创建一个名为dept_summary(deptno,emp_count,sal_sum)的表，保存每一个部门的人数与工资总额。创建一个触发器，当对emp2表执行INSERT, UPDATE, DELETE 操作时，自动更新dept_summary 表中的数据。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">trigger</span> obj5_2<span class="token keyword">after</span> <span class="token keyword">insert</span> <span class="token operator">or</span> <span class="token keyword">update</span> <span class="token operator">or</span> <span class="token keyword">delete</span> <span class="token keyword">on</span> emp2<span class="token punctuation">;</span> <span class="token keyword">declare</span> <span class="token keyword">cursor</span> obj5_2emp2 <span class="token operator">is</span> <span class="token keyword">select</span> deptno<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>empno<span class="token punctuation">)</span> <span class="token keyword">as</span> emp_count<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">as</span> sal_sum     <span class="token keyword">from</span> emp2 <span class="token keyword">group</span> <span class="token keyword">by</span> deptno<span class="token punctuation">;</span>    <span class="token keyword">begin</span>    <span class="token keyword">delete</span> dept_summary<span class="token punctuation">;</span>    <span class="token keyword">for</span> obj5_2emp2 <span class="token operator">in</span> obj5_2emp2 <span class="token keyword">loop</span>  dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span>obj5_emp2<span class="token punctuation">.</span>deptno <span class="token operator">||</span> obj5_emp2<span class="token punctuation">.</span>emp_count <span class="token operator">||</span> obj5_emp2<span class="token punctuation">.</span>sal_sum<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">insert</span> <span class="token keyword">into</span> dept_summary <span class="token keyword">values</span><span class="token punctuation">(</span>obj5_emp2<span class="token punctuation">.</span>deptno<span class="token punctuation">,</span>obj5_emp2<span class="token punctuation">.</span>emp_count<span class="token punctuation">,</span>obj5_emp2<span class="token punctuation">.</span>sal_sum<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">end</span> <span class="token keyword">loop</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建一个dept1表的触发器，当删除一个部门时，同时也在emp1表中删除该部门所有的员工记录。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">trigger</span> obj5_3before <span class="token keyword">delete</span> <span class="token keyword">on</span> emp1 <span class="token keyword">for each row</span><span class="token punctuation">;</span><span class="token keyword">declare</span><span class="token keyword">begin</span><span class="token keyword">delete</span> <span class="token keyword">from</span> emp1 <span class="token keyword">where</span> deptno<span class="token operator">=</span>:old<span class="token punctuation">.</span>deptno<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建一个empdept 视图的instead of触发器。当向该视图插入一条记录时，先判断该部门是否存在，若存在，则向emp2表插入一条相应的员工记录；若不存在该部门，则先向dept1表插入一条相应的部门记录，再向emp2表插入一条相应的员工记录。当从该视图删除记录时，则从emp2表中删除相应的员工记录。  </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">trigger</span> obj5_5    before <span class="token keyword">INSERT</span> <span class="token operator">OR</span> <span class="token keyword">UPDATE</span> <span class="token operator">OR</span> <span class="token keyword">DELETE</span> <span class="token keyword">on</span> emp3 <span class="token keyword">for each row</span><span class="token keyword">declare</span>    vd number<span class="token punctuation">;</span>    vb number<span class="token punctuation">;</span><span class="token keyword">begin</span>    <span class="token keyword">if</span> inserting <span class="token keyword">then</span>        <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>deptno<span class="token punctuation">)</span> <span class="token keyword">into</span> vd <span class="token keyword">from</span> dept <span class="token keyword">where</span> deptno<span class="token operator">=</span>:new<span class="token punctuation">.</span>deptno<span class="token punctuation">;</span>        <span class="token keyword">IF</span> vd<span class="token operator">=</span><span class="token number">0</span> <span class="token keyword">THEN</span>            raise_application_error<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20000</span><span class="token punctuation">,</span><span class="token string">'部门不存在'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">--dbms_output.put_line('部门号不存在不能更新');</span>        <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>    ELSIF updating <span class="token keyword">THEN</span>    <span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>deptno<span class="token punctuation">)</span> <span class="token keyword">INTO</span> vd <span class="token keyword">FROM</span> dept1 <span class="token keyword">WHERE</span> deptno<span class="token operator">=</span>:NEW<span class="token punctuation">.</span>deptno<span class="token punctuation">;</span>    <span class="token keyword">IF</span> vd <span class="token operator">=</span><span class="token number">0</span> <span class="token keyword">THEN</span>       dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'部门号不存在不能更新'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--raise_application_error(-20001,'部门号不存在不能更新');</span>    <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span> <span class="token comment">-- UPDATE dept SET dname=:new.dname,loc=:new.loc WHERE deptno=:new.deptno;</span>      ELSIF deleting <span class="token keyword">THEN</span>   <span class="token comment">--判部门号是否存在</span>    <span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>deptno<span class="token punctuation">)</span> <span class="token keyword">INTO</span> vd  <span class="token keyword">FROM</span> dept1 <span class="token keyword">WHERE</span> deptno<span class="token operator">=</span>:old<span class="token punctuation">.</span>deptno<span class="token punctuation">;</span>     <span class="token comment">--如果部门号不存在</span>     <span class="token keyword">IF</span> vd <span class="token operator">=</span><span class="token number">0</span> <span class="token keyword">THEN</span>     raise_application_error<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20002</span><span class="token punctuation">,</span><span class="token string">'部门号不存在不能删除'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>  <span class="token keyword">ELSE</span>    <span class="token boolean">NULL</span><span class="token punctuation">;</span>  <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span> <span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建一个emp3表的触发器，功能是：当插入记录时，若dept表不存在相应的部门，则拒绝插入；当修改记录中部门号deptno时，若dept1表不存在相应的部门，则拒绝修改。也就是不定义外键，用触发器完成相应的约束。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">trigger</span> obj5_6before <span class="token keyword">insert</span> <span class="token operator">or</span> <span class="token keyword">update</span> <span class="token keyword">on</span> emp4 <span class="token keyword">for each row</span><span class="token keyword">begin</span>:new<span class="token punctuation">.</span>ename:<span class="token operator">=</span>upper<span class="token punctuation">(</span>:new<span class="token punctuation">.</span>ename<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建一个emp4表的触发器，功能是：当插入或修改记录时，将员工的姓名转换成大写字母。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">trigger</span> obj5_6before <span class="token keyword">insert</span> <span class="token operator">or</span> <span class="token keyword">update</span> <span class="token keyword">on</span> emp4 <span class="token keyword">for each row</span><span class="token keyword">begin</span>:new<span class="token punctuation">.</span>ename:<span class="token operator">=</span>upper<span class="token punctuation">(</span>:new<span class="token punctuation">.</span>ename<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 复习 </tag>
            
            <tag> sql </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 触发器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库实验四</title>
      <link href="2020/12/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E5%9B%9B/"/>
      <url>2020/12/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E5%9B%9B/</url>
      
        <content type="html"><![CDATA[<h2 id="PL-SQL程序基础2"><a href="#PL-SQL程序基础2" class="headerlink" title="PL/SQL程序基础2"></a>PL/SQL程序基础2</h2><hr><ol><li><p>在A_DB模式中有一个表tan1(a)，表中有若干个整数（不要管是否有重复）。<br>请编写一个名为obj4_1 的存储函数（无参数），统计该表中有多少个数是素数，并作为函数返回值返回。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--修改用户名,可以自己修改自己的密码</span><span class="token keyword">alter</span> <span class="token keyword">user</span> 用户名 identified <span class="token keyword">by</span> <span class="token string">"新密码"</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token operator">or</span> preplace <span class="token keyword">function</span> obj4_1 <span class="token keyword">return</span> <span class="token keyword">integer</span><span class="token keyword">as</span> a <span class="token keyword">int</span> :<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> f <span class="token keyword">int</span> :<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">begin</span> <span class="token keyword">for</span> e <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> form A_db<span class="token punctuation">.</span>tanl<span class="token punctuation">)</span> <span class="token keyword">loop</span> <span class="token keyword">for</span> b <span class="token operator">in</span> <span class="token number">2.</span><span class="token punctuation">.</span>trunc<span class="token punctuation">(</span>sqrt<span class="token punctuation">(</span>e<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">loop</span> <span class="token keyword">if</span> <span class="token function">mod</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span> <span class="token keyword">then</span> f:<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">exit</span><span class="token punctuation">;</span> <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span> <span class="token keyword">end</span> <span class="token keyword">loop</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> f<span class="token operator">=</span><span class="token number">0</span> <span class="token keyword">then</span> a:<span class="token operator">=</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span> <span class="token keyword">end</span> <span class="token keyword">loop</span><span class="token punctuation">;</span> <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><a id="more"></a></li><li><p>在A_DB模式中有一个表tan3(a)，表中有若干个整数（不要管是否有重复）,假设这些数表示年份。<br>请编写一个名为obj4_2的存储函数（无参数），统计该表中有多少个年份是闰年，并作为函数返回值返回。<br>说明：闰年的计算方法：被400整除，或被4整除而不能被100整除的年份为闰年。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">function</span> obj4_2 <span class="token keyword">return</span> <span class="token keyword">integer</span><span class="token keyword">as</span>     m <span class="token keyword">integer</span> :<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    is_t <span class="token keyword">BOOLEAN</span><span class="token punctuation">;</span>    <span class="token keyword">begin</span>        <span class="token keyword">for</span> e <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> a_db<span class="token punctuation">.</span>tan3<span class="token punctuation">)</span> <span class="token keyword">LOOP</span>            is_t:<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token function">mod</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>a<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span> <span class="token keyword">then</span>                <span class="token keyword">if</span> <span class="token function">mod</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>a<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span> <span class="token keyword">then</span>                    is_t:<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>            <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token function">mod</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>a<span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span> <span class="token keyword">then</span>                is_t:<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> is_t <span class="token keyword">then</span>                m:<span class="token operator">=</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>        <span class="token keyword">end</span> <span class="token keyword">loop</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> m<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在A_DB模式中有一个表tanbn1(a,b)。<br>请编写一个名为obj4_3的存储函数（无参数），对于表中所有三位数abc,将个位与百位数字交换，得到cba，求这些cba的和，并作为函数返回值返回。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">REPLACE</span> <span class="token keyword">function</span> obj4_3 <span class="token keyword">return</span> <span class="token keyword">integer</span><span class="token keyword">as</span>a <span class="token keyword">int</span> :<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">begin</span><span class="token keyword">for</span> n <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> a_db<span class="token punctuation">.</span>tanbn1<span class="token punctuation">)</span> <span class="token keyword">loop</span><span class="token keyword">if</span> n<span class="token punctuation">.</span>a<span class="token operator">&gt;</span><span class="token number">100</span> <span class="token operator">and</span> n<span class="token punctuation">.</span>a<span class="token operator">&lt;</span><span class="token number">1000</span> <span class="token keyword">then</span>            a<span class="token operator">=</span>a<span class="token operator">+</span>trunc<span class="token punctuation">(</span>n<span class="token punctuation">.</span>a<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">mod</span><span class="token punctuation">(</span>trunc<span class="token punctuation">(</span>n<span class="token punctuation">.</span>a<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span><span class="token function">mod</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>a<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">;</span>            <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> n<span class="token punctuation">.</span>a<span class="token operator">&gt;</span><span class="token number">100</span> <span class="token operator">and</span> n<span class="token punctuation">.</span>a<span class="token operator">&lt;</span><span class="token number">1000</span> <span class="token keyword">then</span>            a<span class="token operator">=</span>a<span class="token operator">+</span>trunc<span class="token punctuation">(</span>n<span class="token punctuation">.</span>b<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">mod</span><span class="token punctuation">(</span>trunc<span class="token punctuation">(</span>n<span class="token punctuation">.</span>b<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span><span class="token function">mod</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>b<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">;</span>            <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>        <span class="token keyword">end</span> <span class="token keyword">loop</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> a<span class="token punctuation">;</span>   <span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>对称字符串。<br>在A_DB模式中有一个表tac1(a)，表中有若干个字符串（不要管是否有重复）。<br>请编写一个名为obj4_4的存储函数（无参数），统计该表中有多少对称字符串，并作为函数返回值返回。<br>说明：对称字符串是正读倒读一样的字符串。如：“abcdcba”、“6”和”123321”等前后对称，是对称字符串；而“12332”不是。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">function</span> obj4_4 <span class="token keyword">return</span> <span class="token keyword">integer</span> <span class="token keyword">as</span>     m <span class="token keyword">integer</span> :<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>     a <span class="token keyword">integer</span> :<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>     b <span class="token keyword">integer</span> :<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>s <span class="token keyword">integer</span> :<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>     c <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     d <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">begin</span>   <span class="token keyword">for</span> r <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> a_db<span class="token punctuation">.</span>tac1<span class="token punctuation">)</span> <span class="token keyword">loop</span>        a:<span class="token operator">=</span>length<span class="token punctuation">(</span>r<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        m:<span class="token operator">=</span>a<span class="token punctuation">;</span>        <span class="token keyword">for</span> j <span class="token operator">in</span> <span class="token number">1.</span><span class="token punctuation">.</span>m<span class="token operator">/</span><span class="token number">2</span> <span class="token keyword">loop</span>            c:<span class="token operator">=</span>substr<span class="token punctuation">(</span>r<span class="token punctuation">.</span>a<span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            d:<span class="token operator">=</span>substr<span class="token punctuation">(</span>r<span class="token punctuation">.</span>a<span class="token punctuation">,</span>a<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> c<span class="token operator">!=</span>d <span class="token keyword">then</span>                <span class="token keyword">exit</span><span class="token punctuation">;</span>            <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>            a:<span class="token operator">=</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>s:<span class="token operator">=</span>j<span class="token punctuation">;</span>        <span class="token keyword">end</span> <span class="token keyword">loop</span><span class="token punctuation">;</span>        <span class="token comment">--不能用b/2-1，因为计算出来是小数，而不会相等</span>        <span class="token keyword">if</span> a<span class="token operator">=</span>s<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">or</span> a<span class="token operator">=</span>b<span class="token operator">/</span><span class="token number">2</span> <span class="token keyword">then</span>            m:<span class="token operator">=</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>   <span class="token keyword">end</span> <span class="token keyword">loop</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> m<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写一个名为obj4_5的存储过程，判断正整数n是否是若干个连续的正整数之和。如是，则输出这些连续的正整数；如果有多串连续的正整数，则输出最长的那串连续的正整数。n是过程的参数。如：15=1+2+3+4+5，15=7+8，则输出1,2,3,4,5。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span><span class="token keyword">procedure</span> obj4_5<span class="token punctuation">(</span>n <span class="token keyword">integer</span> <span class="token punctuation">)</span><span class="token keyword">as</span>a <span class="token keyword">integer</span><span class="token punctuation">;</span>b <span class="token keyword">integer</span><span class="token punctuation">;</span>c <span class="token keyword">integer</span><span class="token punctuation">;</span>d <span class="token keyword">integer</span><span class="token punctuation">;</span>k <span class="token keyword">integer</span><span class="token punctuation">;</span>s <span class="token keyword">integer</span> :<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">begin</span>    <span class="token keyword">for</span> c <span class="token operator">in</span> <span class="token number">1.</span><span class="token punctuation">.</span>n<span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">loop</span>        <span class="token keyword">for</span> d <span class="token operator">in</span> c<span class="token operator">+</span><span class="token number">1.</span><span class="token punctuation">.</span>n <span class="token keyword">loop</span>            a:<span class="token operator">=</span>c<span class="token operator">+</span>d<span class="token punctuation">;</span>            b:<span class="token operator">=</span>d<span class="token operator">-</span>c<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> n<span class="token operator">=</span>a<span class="token operator">*</span>b<span class="token operator">/</span><span class="token number">2</span> <span class="token keyword">then</span>                <span class="token keyword">for</span> k <span class="token operator">in</span> c<span class="token punctuation">.</span><span class="token punctuation">.</span>d <span class="token keyword">loop</span>                    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span>k<span class="token operator">||</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">end</span> <span class="token keyword">loop</span><span class="token punctuation">;</span>                s:<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">EXIT</span><span class="token punctuation">;</span>            <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>        <span class="token keyword">end</span> <span class="token keyword">loop</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> s<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">then</span>            s:<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">EXIT</span><span class="token punctuation">;</span>        <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">loop</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写一个名为obj4_6的存储函数，判断正整数n是否是若干个连续的正整数之和。如是，则返回1，否则返回0。n是函数的参数。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">function</span> obj4_6<span class="token punctuation">(</span>n <span class="token keyword">integer</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">integer</span> <span class="token keyword">as</span>a <span class="token keyword">integer</span><span class="token punctuation">;</span>b <span class="token keyword">integer</span><span class="token punctuation">;</span>c <span class="token keyword">integer</span><span class="token punctuation">;</span>d <span class="token keyword">integer</span><span class="token punctuation">;</span>k <span class="token keyword">integer</span><span class="token punctuation">;</span><span class="token keyword">begin</span><span class="token keyword">for</span> c <span class="token operator">in</span> <span class="token number">1.</span><span class="token punctuation">.</span>n<span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">loop</span>    <span class="token keyword">for</span> d <span class="token operator">in</span> c<span class="token operator">+</span><span class="token number">1.</span><span class="token punctuation">.</span>n <span class="token keyword">loop</span>        a:<span class="token operator">=</span>c<span class="token operator">+</span>d<span class="token punctuation">;</span>        b:<span class="token operator">=</span>d<span class="token operator">-</span>c<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> n<span class="token operator">=</span>a<span class="token operator">*</span>b<span class="token operator">/</span><span class="token number">2</span> <span class="token keyword">then</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">loop</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">loop</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在A_DB模式中有一个表tan2(a)，表中有若干个整数（不要管是否有重复）。<br>请编写一个名为obj4_7的存储函数（无参数），统计该表中有多少个数是若干个连续的正整数之和，并作为函数返回值返回。要求调用第6题编写的存储函数f6(n)。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">function</span> obj4_7 <span class="token keyword">return</span> <span class="token keyword">integer</span> <span class="token keyword">as</span>m <span class="token keyword">integer</span> :<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">begin</span>    <span class="token keyword">for</span> e <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> a_db<span class="token punctuation">.</span>tan2<span class="token punctuation">)</span> <span class="token keyword">loop</span>        <span class="token keyword">if</span> obj4_6<span class="token punctuation">(</span>e<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">then</span>            m:<span class="token operator">=</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">loop</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> m<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写一个名为obj4_8的程序包，包中重载两个过程，一个以员工号为参数，输出该员工信息；另一个以员工名为参数，输出员工信息。包中另一个过程利用两个重载过程分别查询员工号为7902、7934、以及员工名为SMITH、FORD的员工信息。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> package obj4_8 <span class="token keyword">as</span> <span class="token keyword">PROCEDURE</span> p1<span class="token punctuation">(</span>vno emp<span class="token punctuation">.</span>empno<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">procedure</span> p2<span class="token punctuation">(</span>vname emp<span class="token punctuation">.</span>ename<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">procedure</span> p3<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token comment">--</span><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> package body obj4_8 <span class="token keyword">as</span>    <span class="token keyword">procedure</span> p1<span class="token punctuation">(</span>vno emp<span class="token punctuation">.</span>empno<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">)</span>    <span class="token keyword">as</span>    vemp emp<span class="token operator">%</span>rowtype<span class="token punctuation">;</span>    <span class="token keyword">begin</span>        <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">into</span> vemp <span class="token keyword">from</span> emp        <span class="token keyword">where</span> empno<span class="token operator">=</span>vno<span class="token punctuation">;</span>        dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span>vemp<span class="token punctuation">.</span>ename<span class="token operator">||</span><span class="token string">' '</span><span class="token operator">||</span>vemp<span class="token punctuation">.</span>job<span class="token operator">||</span><span class="token string">' '</span><span class="token operator">||</span>vemp<span class="token punctuation">.</span>sal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> p1<span class="token punctuation">;</span>         <span class="token keyword">procedure</span> p2<span class="token punctuation">(</span>vname emp<span class="token punctuation">.</span>ename<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">)</span>    <span class="token keyword">as</span>    vemp emp<span class="token operator">%</span>rowtype<span class="token punctuation">;</span>    <span class="token keyword">begin</span>        <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">into</span> vemp <span class="token keyword">from</span> emp        <span class="token keyword">where</span> ename<span class="token operator">=</span>vname<span class="token punctuation">;</span>        dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span>vemp<span class="token punctuation">.</span>ename<span class="token operator">||</span><span class="token string">' '</span><span class="token operator">||</span>vemp<span class="token punctuation">.</span>job<span class="token operator">||</span><span class="token string">' '</span><span class="token operator">||</span>vemp<span class="token punctuation">.</span>sal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> p2<span class="token punctuation">;</span>        <span class="token keyword">procedure</span> p3   <span class="token keyword">as</span>    <span class="token keyword">begin</span>    obj4_8<span class="token punctuation">.</span>p1<span class="token punctuation">(</span><span class="token string">'7902'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    obj4_8<span class="token punctuation">.</span>p1<span class="token punctuation">(</span><span class="token string">'7934'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    obj4_8<span class="token punctuation">.</span>p2<span class="token punctuation">(</span><span class="token string">'SMITH'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    obj4_8<span class="token punctuation">.</span>p2<span class="token punctuation">(</span><span class="token string">'FORD'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> p3<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在示例“5.二进制转换为十进制”的bit_to_number函数中特意用到了动态SQL与BIN_TO_NUM函数。请换一种方式实现相同的功能，该存储函数命名为obj4_9。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">function</span> obj4_9 <span class="token punctuation">(</span>v varchar2<span class="token punctuation">)</span> <span class="token keyword">return</span> number    <span class="token keyword">as</span>      m <span class="token keyword">integer</span><span class="token punctuation">;</span>      total <span class="token keyword">integer</span>:<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      i <span class="token keyword">integer</span><span class="token punctuation">;</span>      <span class="token keyword">begin</span>       i:<span class="token operator">=</span>length<span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> e <span class="token operator">in</span> <span class="token number">0.</span><span class="token punctuation">.</span>i<span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">loop</span>        m:<span class="token operator">=</span>to_number<span class="token punctuation">(</span>substr<span class="token punctuation">(</span>v<span class="token punctuation">,</span>i<span class="token operator">-</span>e<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span><span class="token operator">*</span>e<span class="token punctuation">;</span>       total:<span class="token operator">=</span>total<span class="token operator">+</span>m<span class="token punctuation">;</span>     <span class="token keyword">end</span> <span class="token keyword">loop</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> total<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 复习 </tag>
            
            <tag> sql </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库实验三</title>
      <link href="2020/12/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E4%B8%89/"/>
      <url>2020/12/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<h2 id="游标的异常处理"><a href="#游标的异常处理" class="headerlink" title="游标的异常处理"></a>游标的异常处理</h2><hr><ol><li><p>用显式游标输出emp表的所有信息。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">procedure</span> obj3_1<span class="token keyword">as</span><span class="token keyword">declare</span> <span class="token keyword">cursor</span> obj3_1 <span class="token operator">is</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token keyword">begin</span><span class="token keyword">for</span> a <span class="token operator">in</span> obj3_1 <span class="token keyword">loop</span>dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span>a<span class="token punctuation">.</span>empno<span class="token operator">||</span><span class="token string">','</span><span class="token operator">||</span>a<span class="token punctuation">.</span>ename<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">loop</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>用隐式游标输出dept表的所有信息。</p><a id="more"></a><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">procedure</span> obj3_2<span class="token keyword">as</span> <span class="token keyword">begin</span><span class="token keyword">declare</span> v dept<span class="token operator">%</span>rowtype<span class="token punctuation">;</span><span class="token keyword">begin</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">into</span> v <span class="token keyword">from</span> dept<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token keyword">sql</span><span class="token operator">%</span>found <span class="token keyword">then</span>dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span>v<span class="token punctuation">.</span>DEPTNO<span class="token operator">||</span><span class="token string">','</span><span class="token operator">||</span>v<span class="token punctuation">.</span>DNAME<span class="token operator">||</span><span class="token string">','</span><span class="token operator">||</span>v<span class="token punctuation">.</span>CID<span class="token operator">||</span><span class="token string">','</span><span class="token operator">||</span>v<span class="token punctuation">.</span>LOC<span class="token operator">||</span><span class="token string">','</span><span class="token operator">||</span>v<span class="token punctuation">.</span>EMPS<span class="token operator">||</span><span class="token string">','</span><span class="token operator">||</span>v<span class="token punctuation">.</span>INCOME<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>利用游标，修改员工工资。根据job不同，为员工增加相应的sal：</p><p>Job     raise<br>clerk    +500<br>salesman +750<br>analyst  +1000<br>otherwise +2000</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">procedure</span> obj3_3<span class="token keyword">as</span> <span class="token keyword">begin</span><span class="token keyword">declare</span><span class="token keyword">cursor</span> obj3_3 <span class="token operator">is</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span>    a emp<span class="token punctuation">.</span>sal<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">;</span><span class="token keyword">begin</span><span class="token keyword">for</span> a <span class="token operator">in</span> obj3_3 <span class="token keyword">loop</span><span class="token keyword">case</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>job<span class="token punctuation">)</span><span class="token keyword">when</span> <span class="token string">'clerk'</span> a:<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">;</span><span class="token keyword">when</span> <span class="token string">'salesman'</span> a:<span class="token operator">=</span><span class="token number">750</span><span class="token punctuation">;</span><span class="token keyword">when</span> <span class="token string">'analyst'</span> a:<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">;</span><span class="token keyword">else</span> a:<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">case</span><span class="token punctuation">;</span><span class="token keyword">update</span> emp <span class="token keyword">set</span> sal<span class="token operator">=</span>sal<span class="token operator">+</span>a <span class="token keyword">where</span> job<span class="token operator">=</span>a<span class="token punctuation">.</span>job<span class="token punctuation">;</span><span class="token comment">--update emp set sal=sal+a where current of obj3_3;</span><span class="token comment">--current of 游标用于更新删除的操作，需要前面定义为for update</span><span class="token keyword">end</span> <span class="token keyword">loop</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>用显式游标输出指定学年欠费的学生名单（含姓名、专业、欠费金额）。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">procedure</span> obj3_4 <span class="token punctuation">(</span>ye 收费表<span class="token punctuation">.</span>学年<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token keyword">as</span><span class="token keyword">cursor</span> obj3_4 <span class="token operator">is</span> <span class="token keyword">select</span> 姓名<span class="token punctuation">,</span>专业<span class="token punctuation">,</span>应交学费<span class="token punctuation">,</span>已交学费 <span class="token keyword">from</span> 收费表 <span class="token keyword">natural</span> <span class="token keyword">join</span> 学生 <span class="token keyword">where</span> 学年<span class="token operator">=</span>ye <span class="token operator">and</span> 应交学费<span class="token operator">&gt;</span>已交学费<span class="token punctuation">;</span>a 学生<span class="token punctuation">.</span>姓名<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">;</span>b 学生<span class="token punctuation">.</span>专业<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">;</span>c 收费表<span class="token punctuation">.</span>应交学费<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">;</span>d 收费表<span class="token punctuation">.</span>应交学费<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">;</span><span class="token keyword">begin</span><span class="token keyword">open</span> obj3_4<span class="token punctuation">;</span><span class="token keyword">loop</span><span class="token keyword">fetch</span> obj3_4 <span class="token keyword">into</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">;</span><span class="token keyword">exit</span> <span class="token keyword">when</span> obj3_4<span class="token operator">%</span>notfound <span class="token keyword">loop</span>dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span>a <span class="token operator">||</span> chr<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">||</span> b <span class="token operator">||</span> chr<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">||</span> to_char<span class="token punctuation">(</span>c<span class="token operator">-</span>d<span class="token punctuation">,</span><span class="token string">'99999'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">loop</span><span class="token punctuation">;</span><span class="token keyword">close</span> obj3_4<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>有针对性地给“实验二”实验项目中的过程与函数增加异常处理部分，保留原来的过程与函数，修改后的过程与函数另外保存，如obj2_1、obj2_2、…、obj2_13依次另存为obj3_11、obj3_12、…、obj2_23。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--(1) 输出名为SMITH的雇员的工资和职位。(存储过程)</span><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">procedure</span> obj3_11 <span class="token keyword">as</span>   v_sal number<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   v_job varchar2<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">begin</span>   <span class="token keyword">select</span> sal<span class="token punctuation">,</span>job       <span class="token keyword">into</span> v_sal<span class="token punctuation">,</span>v_job       <span class="token keyword">from</span> emp       <span class="token keyword">where</span> ename<span class="token operator">=</span><span class="token string">'smith'</span><span class="token punctuation">;</span>  EXCEPTION      <span class="token keyword">WHEN</span> NO_DATA_FOUND <span class="token keyword">THEN</span>   DBMS_OUTPUT<span class="token punctuation">.</span>PUT_LINE<span class="token punctuation">(</span><span class="token string">'数据库中没有编码为'</span><span class="token operator">||</span><span class="token string">'smith'</span><span class="token operator">||</span><span class="token string">'的员工'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">WHEN</span> TOO_MANY_ROWS <span class="token keyword">THEN</span>  DBMS_OUTPUT<span class="token punctuation">.</span>PUT_LINE<span class="token punctuation">(</span><span class="token string">'程序运行错误!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">WHEN</span> OTHERS <span class="token keyword">THEN</span>  dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span>v_job<span class="token operator">||</span><span class="token string">' '</span><span class="token operator">||</span>v_sal<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">end</span><span class="token punctuation">;</span><span class="token comment">--SQLCode：数据库操作的返回码，其中0表示成功；-1表示失败；100表示没有检索到数据；+1表示用户自定义异常。</span><span class="token comment">--sqlerrm函数 sqlerrm函数返回指定错误代码的错误信息。</span><span class="token comment">-----------------------------------------------------------</span><span class="token comment">--(2)传送参数部门编号，输出该部门名和地理位置。(存储过程)</span><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">procedure</span> obj3_12<span class="token punctuation">(</span>a dept<span class="token punctuation">.</span>deptno<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token keyword">as</span>c dept<span class="token punctuation">.</span>name<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">;</span>d dept<span class="token punctuation">.</span>loc<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">;</span><span class="token keyword">begin</span><span class="token keyword">select</span> name<span class="token punctuation">,</span>loc <span class="token keyword">into</span> c<span class="token punctuation">,</span>d <span class="token keyword">from</span> dept <span class="token keyword">where</span> deptno<span class="token operator">=</span>a<span class="token punctuation">;</span>dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span>c<span class="token operator">||</span><span class="token string">'|'</span><span class="token operator">||</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span> EXCEPTION<span class="token keyword">when</span> not_date_found <span class="token keyword">then</span><span class="token comment">--select语句没有查出数据</span> DBMS_OUTPUT<span class="token punctuation">.</span>PUT_LINE<span class="token punctuation">(</span><span class="token string">'数据库中没有编码为'</span><span class="token operator">||</span>a<span class="token operator">||</span><span class="token string">'的部门'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">when</span> too_many_rows <span class="token keyword">then</span><span class="token comment">--语句匹配了多个行</span> DBMS_OUTPUT<span class="token punctuation">.</span>PUT_LINE<span class="token punctuation">(</span><span class="token string">'程序运行错误!请使用游标'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">when</span> others <span class="token keyword">then</span>DBMS_OUTPUT<span class="token punctuation">.</span>PUT_LINE<span class="token punctuation">(</span>SQLCODE<span class="token operator">||</span><span class="token string">'---'</span><span class="token operator">||</span>SQLERRM<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token comment">----------------------------------------------------------</span><span class="token comment">--(3)传送参数雇员号，输出该雇员的工资和提成，没有提成的用0替代。（用%type实现）。(存储过程)</span><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">procedure</span> obj3_13<span class="token punctuation">(</span>v_empno emp<span class="token punctuation">.</span>empno<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">)</span><span class="token keyword">as</span>  v_sal emp<span class="token punctuation">.</span>empno<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">;</span>    v_comm emp<span class="token punctuation">.</span>comm<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">;</span><span class="token keyword">begin</span>   <span class="token keyword">select</span> sal<span class="token punctuation">,</span>nvl<span class="token punctuation">(</span>comm<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>      <span class="token keyword">into</span> v_sal<span class="token punctuation">,</span>v_comm      <span class="token keyword">from</span> emp      <span class="token keyword">where</span> empno<span class="token operator">=</span>v_empno<span class="token punctuation">;</span>   dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span>v_sal<span class="token operator">||</span><span class="token string">' '</span><span class="token operator">||</span>v_comm<span class="token punctuation">)</span><span class="token punctuation">;</span>  EXCEPTION  <span class="token keyword">WHEN</span> NO_DATA_FOUND <span class="token keyword">THEN</span>   DBMS_OUTPUT<span class="token punctuation">.</span>PUT_LINE<span class="token punctuation">(</span><span class="token string">'数据库中没有编码为'</span><span class="token operator">||</span>v_empno<span class="token operator">||</span><span class="token string">'的雇员'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">WHEN</span> TOO_MANY_ROWS <span class="token keyword">THEN</span>  DBMS_OUTPUT<span class="token punctuation">.</span>PUT_LINE<span class="token punctuation">(</span><span class="token string">'程序运行错误!请使用游标'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">WHEN</span> OTHERS <span class="token keyword">THEN</span>  DBMS_OUTPUT<span class="token punctuation">.</span>PUT_LINE<span class="token punctuation">(</span>SQLCODE<span class="token operator">||</span><span class="token string">'---'</span><span class="token operator">||</span>SQLERRM<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token comment">-----------------------------.......</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>之后的太多而且都差不多，所以就不写了。。。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 复习 </tag>
            
            <tag> sql </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 游标与异常处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库实验二</title>
      <link href="2020/12/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E4%BA%8C/"/>
      <url>2020/12/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="PL-SQL程序基础1"><a href="#PL-SQL程序基础1" class="headerlink" title="PL/SQL程序基础1"></a>PL/SQL程序基础1</h2><hr><ol><li><p>输出名为SMITH的雇员的工资和职位。(存储过程)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--set serveroutput on;不能输出时先运行这一句话</span><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">procedure</span> obj2_1 <span class="token keyword">as</span>   vjob VARCHAR2<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   vsal NUMBER<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">begin</span>    <span class="token keyword">select</span> job<span class="token punctuation">,</span>sal        <span class="token keyword">into</span> vjob<span class="token punctuation">,</span> vsal        <span class="token keyword">from</span> emp        <span class="token keyword">where</span> ename <span class="token operator">=</span> <span class="token string">'SMITH'</span><span class="token punctuation">;</span>    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'job:'</span><span class="token operator">||</span>vjob<span class="token operator">||</span><span class="token string">',sal:'</span><span class="token operator">||</span>vsal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><a id="more"></a></li><li><p>传送参数部门编号，输出该部门名和地理位置。(存储过程)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">reate <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">procedure</span> obj2_2<span class="token punctuation">(</span>z_deptno dept<span class="token punctuation">.</span>deptno<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">)</span><span class="token keyword">as</span>  z_dname dept<span class="token punctuation">.</span>dname<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">;</span>    z_loc dept<span class="token punctuation">.</span>loc<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">;</span><span class="token keyword">begin</span>   <span class="token keyword">select</span> dname<span class="token punctuation">,</span>loc      <span class="token keyword">into</span> z_dname<span class="token punctuation">,</span>z_loc      <span class="token keyword">from</span> dept      <span class="token keyword">where</span> deptno<span class="token operator">=</span>z_deptno<span class="token punctuation">;</span>   dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span>z_dname<span class="token operator">||</span><span class="token string">' '</span><span class="token operator">||</span>z_loc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>传送参数雇员号，输出该雇员的工资和提成，没有提成的用0替代。（用%type实现）。(存储过程)</p><pre class="line-numbers language-none"><code class="language-none">create or replace procedure obj2_3(v_empno emp.empno%type)as  v_sal emp.sal%TYPE;    v_comm emp.comm%TYPE;begin    select sal,nvl(comm,0)    into v_sal,v_comm    from emp    where empno=v_empno;    dbms_output.put_line(v_sal||' '||v_comm);end;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>传送参数雇员号，输出该雇员的所有信息，没有提成的用0替代。（用%rowtype实现）。(存储过程)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">procedure</span> obj2_4<span class="token punctuation">(</span>vempno emp<span class="token punctuation">.</span>empno<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token keyword">as</span>      row_emp emp<span class="token operator">%</span>rowtype<span class="token punctuation">;</span>    <span class="token keyword">begin</span>     <span class="token keyword">select</span> empno<span class="token punctuation">,</span> ename<span class="token punctuation">,</span>job<span class="token punctuation">,</span>mgr<span class="token punctuation">,</span> hiredate<span class="token punctuation">,</span>nvl<span class="token punctuation">(</span>sal<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nvl<span class="token punctuation">(</span>comm<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>deptno     <span class="token keyword">into</span> row_emp   <span class="token keyword">from</span> emp     <span class="token keyword">where</span> empno<span class="token operator">=</span> vempno<span class="token punctuation">;</span>     dbms_output<span class="token punctuation">.</span>put<span class="token punctuation">(</span>row_emp<span class="token punctuation">.</span>empno<span class="token operator">||</span><span class="token string">','</span><span class="token operator">||</span>row_emp<span class="token punctuation">.</span>ename<span class="token operator">||</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     dbms_output<span class="token punctuation">.</span>put<span class="token punctuation">(</span>row_emp<span class="token punctuation">.</span>job<span class="token operator">||</span><span class="token string">','</span><span class="token operator">||</span>row_emp<span class="token punctuation">.</span>mgr<span class="token operator">||</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     dbms_output<span class="token punctuation">.</span>put<span class="token punctuation">(</span>row_emp<span class="token punctuation">.</span>hiredate<span class="token operator">||</span><span class="token string">','</span><span class="token operator">||</span>row_emp<span class="token punctuation">.</span>sal<span class="token operator">||</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span>row_emp<span class="token punctuation">.</span>comm<span class="token operator">||</span><span class="token string">','</span><span class="token operator">||</span>row_emp<span class="token punctuation">.</span>deptno<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>传送参数雇员号，返回该雇员的工资。(存储函数)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">function</span> obg2_5<span class="token punctuation">(</span>v_empno emp<span class="token punctuation">.</span>empno<span class="token operator">%</span><span class="token keyword">TYPE</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">int</span><span class="token keyword">as</span>    v_sal emp<span class="token punctuation">.</span>sal<span class="token operator">%</span><span class="token keyword">TYPE</span><span class="token punctuation">;</span><span class="token keyword">begin</span>    <span class="token keyword">select</span> nvl<span class="token punctuation">(</span>sal<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">into</span> v_sal    <span class="token keyword">from</span> emp    <span class="token keyword">where</span> empno<span class="token operator">=</span>v_empno<span class="token punctuation">;</span>        <span class="token keyword">return</span> v_sal<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>传送参数雇员名或雇员编号，判断他的job，根据job不同，为他增加相应的sal（用if-elsif实现，不要改动到基本表emp，创建一个与emp表一模一样的表emp1）。(存储过程)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span><span class="token keyword">procedure</span> obj2_6<span class="token punctuation">(</span>vempno emp1<span class="token punctuation">.</span>empno<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">,</span>vname emp1<span class="token punctuation">.</span>ename<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token keyword">as</span>     vsal  emp1<span class="token punctuation">.</span>sal<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">;</span> vjob emp1<span class="token punctuation">.</span>job<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">;</span>  <span class="token keyword">begin</span><span class="token keyword">select</span> sal<span class="token punctuation">,</span>job <span class="token keyword">into</span> vsal<span class="token punctuation">,</span>vjob <span class="token keyword">from</span> emp1 <span class="token keyword">where</span> empno<span class="token operator">=</span>vempno <span class="token operator">or</span> ename<span class="token operator">=</span>vname<span class="token punctuation">;</span>  <span class="token keyword">if</span> vjob<span class="token operator">=</span><span class="token string">'CLERK'</span> <span class="token keyword">then</span> vsal:<span class="token operator">=</span>vsal<span class="token operator">+</span><span class="token number">500</span><span class="token punctuation">;</span>  elsif vjob<span class="token operator">=</span><span class="token string">'SALESMAN'</span> <span class="token keyword">then</span> vsal:<span class="token operator">=</span>vsal<span class="token operator">+</span><span class="token number">1000</span><span class="token punctuation">;</span>  elsif vjob<span class="token operator">=</span><span class="token string">'ANALYST'</span> <span class="token keyword">then</span> vsal:<span class="token operator">=</span>vsal<span class="token operator">+</span><span class="token number">1500</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> vsal:<span class="token operator">=</span>vsal<span class="token operator">+</span><span class="token number">3000</span><span class="token punctuation">;</span>  <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>  <span class="token keyword">update</span> emp1 <span class="token keyword">set</span> sal<span class="token operator">=</span>vsal <span class="token keyword">where</span> <span class="token punctuation">(</span>vempno<span class="token operator">=</span>empno<span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span>ename<span class="token operator">=</span>vname<span class="token punctuation">)</span><span class="token punctuation">;</span>  dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span>vname<span class="token operator">||</span><span class="token string">'的工资已经更改为:'</span><span class="token operator">||</span>vsal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>传送参数部门编号，按照下列加工资比例执行给该部门的雇员加工资(用CASE实现，修改emp1表的数据) (存储过程)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">procedure</span> obj2_7<span class="token punctuation">(</span>v_deptno emp1<span class="token punctuation">.</span>deptno<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">)</span><span class="token keyword">as</span> <span class="token keyword">begin</span><span class="token keyword">case</span><span class="token punctuation">(</span>v_deptno<span class="token punctuation">)</span><span class="token keyword">when</span> <span class="token number">10</span> <span class="token keyword">then</span> <span class="token keyword">update</span> emp1 <span class="token keyword">set</span> sal<span class="token operator">=</span>sal<span class="token operator">*</span><span class="token number">1.08</span> <span class="token keyword">where</span> deptno<span class="token operator">=</span>v_deptno<span class="token punctuation">;</span><span class="token keyword">when</span> <span class="token number">20</span> <span class="token keyword">then</span> <span class="token keyword">update</span> emp1 <span class="token keyword">set</span> sal<span class="token operator">=</span>sal<span class="token operator">*</span><span class="token number">1.18</span> <span class="token keyword">where</span> deptno<span class="token operator">=</span>v_deptno<span class="token punctuation">;</span><span class="token keyword">when</span> <span class="token number">30</span> <span class="token keyword">then</span> <span class="token keyword">update</span> emp1 <span class="token keyword">set</span> sal<span class="token operator">=</span>sal<span class="token operator">*</span><span class="token number">1.20</span> <span class="token keyword">where</span> deptno<span class="token operator">=</span>v_deptno<span class="token punctuation">;</span><span class="token keyword">when</span> <span class="token number">40</span> <span class="token keyword">then</span> <span class="token keyword">update</span> emp1 <span class="token keyword">set</span> sal<span class="token operator">=</span>sal<span class="token operator">*</span><span class="token number">1.20</span> <span class="token keyword">where</span> deptno<span class="token operator">=</span>v_deptno<span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">case</span><span class="token punctuation">;</span>dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span>v_deptno<span class="token operator">||</span><span class="token string">'更改完善'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在学生表中增加一列，用来记录学生的密码，写一个PL/SQL程序，模拟登录的过程。输入学号和密码，判断是否正确，对于登录成功和失败分别给出提示信息。(存储过程)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 学生 <span class="token keyword">add</span> 密码 varchar2<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">update</span> 学生 <span class="token keyword">set</span> 密码<span class="token operator">=</span><span class="token string">'666'</span><span class="token punctuation">;</span><span class="token comment">--题解</span><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span><span class="token keyword">procedure</span> obj2_8<span class="token punctuation">(</span>v_学号 学生<span class="token punctuation">.</span>学号<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">,</span>v_密码 学生<span class="token punctuation">.</span>密码<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token keyword">as</span>    vv_学号  学生<span class="token punctuation">.</span>学号<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">;</span>    vv_密码 学生<span class="token punctuation">.</span>密码<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">;</span>  <span class="token keyword">begin</span>     <span class="token keyword">select</span> 学号<span class="token punctuation">,</span>密码      <span class="token keyword">into</span> vv_学号<span class="token punctuation">,</span>vv_密码     <span class="token keyword">from</span> 学生     <span class="token keyword">where</span> v_学号<span class="token operator">=</span>学号 <span class="token operator">and</span> v_密码<span class="token operator">=</span>密码<span class="token punctuation">;</span>     dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'登录成功!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         exception     <span class="token keyword">when</span> no_data_found <span class="token keyword">then</span>      dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'登陆失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写一个向学费标准表添加记录的过程。 </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span><span class="token keyword">procedure</span> obj2_9 <span class="token punctuation">(</span>   v_专业 学费标准表<span class="token punctuation">.</span>专业<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">,</span>   v_学年     学费标准表<span class="token punctuation">.</span>学年<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">,</span>   v_学费    学费标准表<span class="token punctuation">.</span>学费<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token keyword">as</span>  <span class="token keyword">begin</span>  <span class="token keyword">insert</span> <span class="token keyword">into</span> 学费标准表<span class="token punctuation">(</span>专业<span class="token punctuation">,</span> 学年<span class="token punctuation">,</span> 学费<span class="token punctuation">)</span>         <span class="token keyword">values</span> <span class="token punctuation">(</span>v_专业<span class="token punctuation">,</span> v_学年<span class="token punctuation">,</span> v_学费<span class="token punctuation">)</span><span class="token punctuation">;</span>  dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span>v_专业<span class="token operator">||</span><span class="token string">','</span><span class="token operator">||</span>v_学年<span class="token operator">||</span><span class="token string">','</span><span class="token operator">||</span>v_学费<span class="token operator">||</span><span class="token string">'添加完成'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">end</span><span class="token punctuation">;</span><span class="token comment">--测试</span><span class="token keyword">exec</span> obj2_9<span class="token punctuation">(</span><span class="token string">'计算机科学与技术'</span><span class="token punctuation">,</span><span class="token string">'2017'</span><span class="token punctuation">,</span><span class="token string">'13000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写一个学生注册的过程，注册日期默认为当天，以学号为参数。 </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span><span class="token keyword">procedure</span> obj2_10<span class="token punctuation">(</span>v学号  学生<span class="token punctuation">.</span>学号<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token keyword">as</span>     <span class="token keyword">begin</span>      <span class="token keyword">update</span> 学生 <span class="token keyword">set</span> 状态<span class="token operator">=</span><span class="token string">'注册'</span><span class="token punctuation">,</span>注册日期<span class="token operator">=</span>sysdate <span class="token keyword">where</span> 学号<span class="token operator">=</span>v学号 <span class="token operator">and</span> 状态<span class="token operator">=</span><span class="token string">'null'</span><span class="token punctuation">;</span>     dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span>v学号<span class="token operator">||</span><span class="token string">'学生已在'</span><span class="token operator">||</span> to_char <span class="token punctuation">(</span>sysdate<span class="token punctuation">,</span><span class="token string">'yyyy-mm-dd'</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">'注册成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写一个收学费的过程，收费日期默认为当天，以学年、 学号、学费为参数 。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">procedure</span> obj2_11<span class="token punctuation">(</span>v_学年 收费明细表<span class="token punctuation">.</span>学年<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">,</span>  v_学号 收费明细表<span class="token punctuation">.</span>学号<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">,</span>  v_学费 收费明细表<span class="token punctuation">.</span>学费<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token keyword">as</span>  <span class="token keyword">begin</span>  <span class="token keyword">insert</span> <span class="token keyword">INTO</span> 收费明细表<span class="token punctuation">(</span>学年<span class="token punctuation">,</span>学号<span class="token punctuation">,</span>学费<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span>v_学年<span class="token punctuation">,</span>v_学号<span class="token punctuation">,</span>v_学费<span class="token punctuation">)</span><span class="token punctuation">;</span>  dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'成功添加'</span><span class="token operator">||</span>v_学号<span class="token operator">||</span><span class="token string">'在'</span><span class="token operator">||</span>v_学年<span class="token operator">||</span><span class="token string">'学年的付费记录，付款:'</span><span class="token operator">||</span>v_学费<span class="token operator">||</span><span class="token string">'元'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写一个过程，输出指定学年的欠费情况（含欠费人数、欠费总金额）。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">procedure</span> obj2_12<span class="token punctuation">(</span>v_xue 收费明细表<span class="token punctuation">.</span>学年<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token keyword">as</span>a number<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b number<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">begin</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>学号<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>应交学费<span class="token operator">-</span>已交学费<span class="token punctuation">)</span><span class="token keyword">into</span> a<span class="token punctuation">,</span>b<span class="token keyword">from</span> 收费表<span class="token keyword">where</span> 学年<span class="token operator">=</span>v_xue <span class="token operator">and</span> 应交学费<span class="token operator">&gt;</span>已交学费<span class="token punctuation">;</span>dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'欠费人数:'</span><span class="token operator">||</span>a<span class="token operator">||</span><span class="token string">'欠费总额:'</span><span class="token operator">||</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>输出如下九九乘法表。(存储过程)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">procedure</span> obj2_13 <span class="token keyword">as</span>a <span class="token keyword">int</span><span class="token punctuation">;</span>b <span class="token keyword">int</span><span class="token punctuation">;</span><span class="token keyword">begin</span><span class="token keyword">for</span> a <span class="token operator">in</span> <span class="token number">1.</span><span class="token punctuation">.</span><span class="token number">.9</span> <span class="token keyword">loop</span><span class="token keyword">for</span> b <span class="token operator">in</span> <span class="token number">1.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>a <span class="token keyword">loop</span>        dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span>a<span class="token operator">||</span><span class="token string">'*'</span><span class="token operator">||</span>b<span class="token operator">||</span><span class="token string">'='</span><span class="token operator">||</span>a<span class="token operator">*</span>b<span class="token operator">||</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">end</span> <span class="token keyword">loop</span><span class="token punctuation">;</span>        dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">loop</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 复习 </tag>
            
            <tag> sql </tag>
            
            <tag> 数据库 </tag>
            
            <tag> PL/SQL程序基础1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tomcat</title>
      <link href="2020/11/27/tomcat%E9%85%8D%E7%BD%AE/"/>
      <url>2020/11/27/tomcat%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<ul><li> 查看被占用的端口号： </li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">netstat -ano | findstr 8080<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li> 杀死占用的端口号</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">taskkill /pid 14188 /f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><a id="more"></a><p><a href="https://blog.csdn.net/Survivalist_Boy/article/details/103175493?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1.control">idea tomcat配置细节</a></p><hr><h4 id="tomcat修改端口"><a href="#tomcat修改端口" class="headerlink" title="tomcat修改端口"></a>tomcat修改端口</h4><ul><li>浏览器验证的端口为8080，默认的，但有时候数据库会和它有冲突，就需要修改这个端口！</li></ul><p>首先，找到你<strong>tomcat的安装位置</strong></p><p>找到后，点击进去 有一个 <strong>conf文件夹</strong></p><p>里面有一个大宝贝 叫做 <strong>server.xml</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8080<span class="token punctuation">"</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HTTP/1.1<span class="token punctuation">"</span></span>           <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20000<span class="token punctuation">"</span></span>           <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8443<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>把这个8080改了就好！</p><ul><li>但是如果要装多个tomcat的话，还需要修改另外两个接口</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--第一个--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Server</span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18005<span class="token punctuation">"</span></span> <span class="token attr-name">shutdown</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SHUTDOWN<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Listener</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.catalina.startup.VersionLoggerListener<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--第二个--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>AJP/1.3<span class="token punctuation">"</span></span>               <span class="token attr-name">address</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>::1<span class="token punctuation">"</span></span>               <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8009<span class="token punctuation">"</span></span>               <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8443<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><strong>shutdown端口</strong> <strong>关闭tomcat通信接口</strong></li></ol><p>2)<strong>与其他http服务器通信接口</strong>，用于http服务器集合 </p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络[C复习</title>
      <link href="2020/11/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-C%E5%A4%8D%E4%B9%A0/"/>
      <url>2020/11/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-C%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://soporbear.github.io/">**<br>Lilin**</a></p><p><a href="https://soporbear.github.io/"> 首页</a> <a href="https://soporbear.github.io/tags/"> 标签</a> <a href="https://soporbear.github.io/categories/"> 分类</a> <a href="https://soporbear.github.io/archives/"> 归档</a></p><h1 id="计算机网络-重点复习"><a href="#计算机网络-重点复习" class="headerlink" title="计算机网络-重点复习"></a>计算机网络-重点复习</h1><p> 2018-06-07 | <a href="https://soporbear.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/">计算机网络</a></p><h1 id="第一章：概论"><a href="#第一章：概论" class="headerlink" title="第一章：概论"></a>第一章：概论</h1><h2 id="NO-1"><a href="#NO-1" class="headerlink" title="NO.1"></a>NO.1</h2><ul><li><h3 id="OSI-RM"><a href="#OSI-RM" class="headerlink" title="OSI/RM"></a>OSI/RM</h3><p>国际化标准组织提出的一个试图使各种计算机在世界范围内互联成网的标准框架，简称OSI,是一个七层体系结构</p></li><li><h3 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h3><p>得到最广泛应用的计算机网络体系结构，被称为是事实上的国际标准，是一个四层体系结构</p></li><li><h3 id="五层协议模型"><a href="#五层协议模型" class="headerlink" title="五层协议模型"></a>五层协议模型</h3><p>综合OSI和TCP/IP的优点，在学习计算机网络时采用一种只有五层协议的体系结构，既简洁又能将概念阐释清楚</p><a id="more"></a></li><li><h3 id="三种协议模型的对应关系"><a href="#三种协议模型的对应关系" class="headerlink" title="三种协议模型的对应关系"></a>三种协议模型的对应关系</h3><p><img src="https://soporbear.github.io/2018/06/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E9%87%8D%E7%82%B9/20180607125301984.png" alt="img"></p></li></ul><ul><li><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><p>控制两个对等实体（或多个实体）进行通信的规则的集合</p></li><li><h3 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h3><p>在协议控制下，两个对等实体间的通信使得本层能够向上一层提供服务。要实现本层协议，还需要使用下面一层所提供的服务</p></li><li><h3 id="协议三要素"><a href="#协议三要素" class="headerlink" title="协议三要素"></a>协议三要素</h3><ul><li><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>数据与控制信息的结构或格式</p></li><li><h4 id="语义"><a href="#语义" class="headerlink" title="语义"></a>语义</h4><p>即需要发出何种控制信息，完成何种动作以及做出何种响应</p></li><li><h4 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h4><p>时间完成顺序的详细说明</p></li></ul></li></ul><h2 id="NO-2"><a href="#NO-2" class="headerlink" title="NO.2"></a>NO.2</h2><ul><li><h3 id="计算机网络组成（按结构分解）"><a href="#计算机网络组成（按结构分解）" class="headerlink" title="计算机网络组成（按结构分解）"></a>计算机网络组成（按结构分解）</h3><ul><li><h4 id="边缘部分"><a href="#边缘部分" class="headerlink" title="边缘部分"></a>边缘部分</h4><p>由所有连接在互联网上的主机组成。这部分是用户直接使用的，用来进行通信和资源共享</p></li><li><h4 id="核心部分"><a href="#核心部分" class="headerlink" title="核心部分"></a>核心部分</h4><p>由大量网络和连接这些网络的路由器组成。这部分是为边缘部分提供服务的</p></li></ul></li><li><h3 id="计算机网络组成（按功能分解）"><a href="#计算机网络组成（按功能分解）" class="headerlink" title="计算机网络组成（按功能分解）"></a>计算机网络组成（按功能分解）</h3><ul><li><h4 id="通信子网"><a href="#通信子网" class="headerlink" title="通信子网"></a>通信子网</h4><p>主要负责全网的数据通信。包括通信线路、网络连接设备、网络通信协议和通信控制软件等</p></li><li><h4 id="资源子网"><a href="#资源子网" class="headerlink" title="资源子网"></a>资源子网</h4><p>主要负责全网的信息处理。包括网络中所有的主计算机、I/O设备和终端，各种网络协议、网络软件和数据库等</p></li></ul></li><li><h3 id="计算机网络三要素：结点、链路和线路"><a href="#计算机网络三要素：结点、链路和线路" class="headerlink" title="计算机网络三要素：结点、链路和线路"></a>计算机网络三要素：结点、链路和线路</h3><p>在讨论路由转发分组的过程中，往往把单个网络简化成一条</p><p>链路</p><p>，而路由器称为核心部分的</p><p>结点</p></li></ul><h2 id="NO-3"><a href="#NO-3" class="headerlink" title="NO.3"></a>NO.3</h2><ul><li><h3 id="internet"><a href="#internet" class="headerlink" title="internet"></a>internet</h3><p>以小写字母i开头的internet是一个通用名词，泛指由多个计算机网络互连而成的计算机网络</p></li><li><h3 id="Internet"><a href="#Internet" class="headerlink" title="Internet"></a>Internet</h3><p>以大写字母I开头的Internet是一个专有名词，指当前全球最大的、开放的、由众多网络相互连接而成的特定互联网，它采用TCP/IP协议簇作为通信规则，其前身是美国的ARPANET</p></li></ul><h2 id="NO-4"><a href="#NO-4" class="headerlink" title="NO.4"></a>NO.4</h2><ul><li><h3 id="客户-服务器方式"><a href="#客户-服务器方式" class="headerlink" title="客户-服务器方式"></a>客户-服务器方式</h3><p>客户（client）和服务器（server）都是指通信中所涉及的两个应用进程</p><p>客户是服务请求方，服务器是服务提供方</p></li></ul><h2 id="NO-5"><a href="#NO-5" class="headerlink" title="NO.5"></a>NO.5</h2><ul><li><h3 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h3><p>整个报文的比特流连续地从源点直达终点，好像在一个管道中传送</p></li><li><h3 id="报文交换"><a href="#报文交换" class="headerlink" title="报文交换"></a>报文交换</h3><p>整个报文先传送到相邻节点，全部存储下来后查找转发表，转发到下一节点</p></li><li><h3 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h3><p>单个分组（整个报文的一部分）传送到相邻结点，存储下来后查找转发表，转发到下一结点</p></li></ul><p><a href="https://soporbear.github.io/2018/06/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E9%87%8D%E7%82%B9/20180607013703828.png"><img src="https://soporbear.github.io/2018/06/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E9%87%8D%E7%82%B9/20180607013703828.png" alt="img"></a></p><ul><li><h3 id="分组交换的主要特点"><a href="#分组交换的主要特点" class="headerlink" title="分组交换的主要特点"></a>分组交换的主要特点</h3><p>通常我们把要发送的整块数据称为一个</p><p>报文</p><p>，在发送报文前，先把较长的报文划分成为一个个更小的等长数据段，在每个数据段前面，加上一些由必要的控制信息组成的</p><p>首部</p><p>后，就构成了一个</p><p>分组</p><p>。分组又称为</p><p>包</p><p>，首部也可称为</p><p>包头</p><p>。正是由于分组的首部包含了诸如目的地址和源地址等重要信息，每一个分组才能在互联网中独立选择传输路径并被正确托付到分组传输的终点</p></li></ul><h2 id="NO-6"><a href="#NO-6" class="headerlink" title="NO.6"></a>NO.6</h2><ul><li><h3 id="计算机网络的分类-按拓扑）"><a href="#计算机网络的分类-按拓扑）" class="headerlink" title="计算机网络的分类(按拓扑）"></a>计算机网络的分类(按拓扑）</h3><p>总线型、星型、环型、树型、网状型</p></li><li><h3 id="计算机网络的分类-按覆盖范围）"><a href="#计算机网络的分类-按覆盖范围）" class="headerlink" title="计算机网络的分类(按覆盖范围）"></a>计算机网络的分类(按覆盖范围）</h3><p>局域网LAN(Local Area Network)、城域网MAN(Metropolitan Area Network)、广域网WAN(Wide Area Network)、个人区域网PAN(Personal Area Network)</p></li></ul><h2 id="NO-7"><a href="#NO-7" class="headerlink" title="NO.7"></a>NO.7</h2><ul><li><h3 id="计算机网络的性能"><a href="#计算机网络的性能" class="headerlink" title="计算机网络的性能"></a>计算机网络的性能</h3><ul><li><h4 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h4><p>数据的传送速率，单位：bit/s</p></li><li><h4 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h4><p>有两种不同含义：</p><ol><li>某信道允许通过的信号频带范围，单位：Hz</li><li>计算机网络中，某通道传送数据的能力（最高数据率），单位：bit/s</li></ol></li><li><h4 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h4><p>单位时间内通过某网络（或信道，接口）的实际数据量</p></li><li><h4 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h4><p>指数据从网络一传送到另一端所需要的时间，又称</p><p>延迟</p><p>或</p><p>迟延</p><p>总时延 = 发送时延+传播时延+处理时延+排队时延</p><p>发送时延 = 数据帧长度（bit）/发送速率（bit/s）</p><p>传播时延 = 信道长度（m）/电磁波在信道上的传输速率（m/s）</p></li></ul></li><li><h3 id="往返时间RTT和有效数据率"><a href="#往返时间RTT和有效数据率" class="headerlink" title="往返时间RTT和有效数据率"></a>往返时间RTT和有效数据率</h3><p>有效数据率 = 数据长度/（发送时间+RTT）</p></li></ul><h1 id="第二章：物理层与通信基础"><a href="#第二章：物理层与通信基础" class="headerlink" title="第二章：物理层与通信基础"></a>第二章：物理层与通信基础</h1><h2 id="NO-1-1"><a href="#NO-1-1" class="headerlink" title="NO.1"></a>NO.1</h2><ul><li><h3 id="物理层上接口特性"><a href="#物理层上接口特性" class="headerlink" title="物理层上接口特性"></a>物理层上接口特性</h3><ul><li><h4 id="机械特性"><a href="#机械特性" class="headerlink" title="机械特性"></a>机械特性</h4><p>指明接口所用接线器的形状和尺寸、引脚数目和排列、固定和锁定装置等。平时常见的各种规格的接插件都有严格的标准化的规定</p></li><li><h4 id="电气特性"><a href="#电气特性" class="headerlink" title="电气特性"></a>电气特性</h4><p>指明在接口电缆的各条线上出现的电压的范围</p></li><li><h4 id="功能特性"><a href="#功能特性" class="headerlink" title="功能特性"></a>功能特性</h4><p>指明某条线上出现的某一电平的电压的意义</p></li><li><h4 id="过程特性"><a href="#过程特性" class="headerlink" title="过程特性"></a>过程特性</h4><p>指明对于不同功能的各种可能事件的出现顺序</p></li></ul></li></ul><h2 id="NO-2-1"><a href="#NO-2-1" class="headerlink" title="NO.2"></a>NO.2</h2><ul><li><h3 id="数据通信系统的三大组成部分"><a href="#数据通信系统的三大组成部分" class="headerlink" title="数据通信系统的三大组成部分"></a>数据通信系统的三大组成部分</h3><ul><li><h4 id="源系统（发送端、发送方）"><a href="#源系统（发送端、发送方）" class="headerlink" title="源系统（发送端、发送方）"></a>源系统（发送端、发送方）</h4><p>源系统一般包括以下两部分：</p><ul><li><h5 id="源点（源站，信源）"><a href="#源点（源站，信源）" class="headerlink" title="源点（源站，信源）"></a>源点（源站，信源）</h5><p>源点设备产生要传输的数据</p></li><li><h5 id="发送器"><a href="#发送器" class="headerlink" title="发送器"></a>发送器</h5><p>通常源点设备产生的数字比特流要通过发送器编码后才能传输。典型的发送器如调制器</p></li></ul></li><li><h4 id="目的系统（接收端、接受方）"><a href="#目的系统（接收端、接受方）" class="headerlink" title="目的系统（接收端、接受方）"></a>目的系统（接收端、接受方）</h4><p>一般也包括两部分：</p><ul><li><h5 id="接收器"><a href="#接收器" class="headerlink" title="接收器"></a>接收器</h5><p>接受传输系统传送过来的信号，并把它转化为能够处理的信息。典型的接收器如解调器</p></li><li><h5 id="终点（目的站，信宿）"><a href="#终点（目的站，信宿）" class="headerlink" title="终点（目的站，信宿）"></a>终点（目的站，信宿）</h5><p>终点设备接受接收器传输过来的数字比特流并输出</p></li></ul></li><li><h4 id="传输系统（传输网络）"><a href="#传输系统（传输网络）" class="headerlink" title="传输系统（传输网络）"></a>传输系统（传输网络）</h4><p>传输系统可以是简单的一条线，也可以是复杂的网络系统</p></li></ul></li><li><h3 id="三种基本的通信方式"><a href="#三种基本的通信方式" class="headerlink" title="三种基本的通信方式"></a>三种基本的通信方式</h3><ul><li><h4 id="单向通行（单工通信）"><a href="#单向通行（单工通信）" class="headerlink" title="单向通行（单工通信）"></a>单向通行（单工通信）</h4><p>只有一个方向的通信而没有反方向的交互</p></li><li><h4 id="双向交替通信-半双工通信）"><a href="#双向交替通信-半双工通信）" class="headerlink" title="双向交替通信(半双工通信）"></a>双向交替通信(半双工通信）</h4><p>通信双方都可以发送信息，但不能同时发送</p></li><li><h4 id="双向同时通信（全双工通信）"><a href="#双向同时通信（全双工通信）" class="headerlink" title="双向同时通信（全双工通信）"></a>双向同时通信（全双工通信）</h4><p>通信双方可以同时发送和接受信息</p></li></ul></li></ul><h2 id="NO-3-1"><a href="#NO-3-1" class="headerlink" title="NO.3"></a>NO.3</h2><ul><li><h3 id="编码与调制"><a href="#编码与调制" class="headerlink" title="编码与调制"></a>编码与调制</h3><ul><li><h4 id="数字数据—-gt-数字信号"><a href="#数字数据—-gt-数字信号" class="headerlink" title="数字数据—>数字信号"></a>数字数据—&gt;数字信号</h4><ul><li><h5 id="不归零编码"><a href="#不归零编码" class="headerlink" title="不归零编码"></a>不归零编码</h5><p>正电平代表1，负电平代表0</p></li><li><h5 id="归零制编码"><a href="#归零制编码" class="headerlink" title="归零制编码"></a>归零制编码</h5><p>正脉冲（电子电路中的电平状态突变）代表1，负脉冲代表0</p></li><li><h5 id="曼彻斯特编码"><a href="#曼彻斯特编码" class="headerlink" title="曼彻斯特编码"></a>曼彻斯特编码</h5><p>位于中心周期的向上跳代表0，位于周期中心的向下跳代表1。曼彻斯特编码可以从信号波形中提取信号时钟频率，具有自同步功能</p></li><li><h5 id="差分曼彻斯特编码"><a href="#差分曼彻斯特编码" class="headerlink" title="差分曼彻斯特编码"></a>差分曼彻斯特编码</h5><p>在每一位的中心处始终都有跳变。位开始边界有跳变代表0，位开始边界没有跳变代表1</p></li></ul></li><li><h4 id="模拟数据-–-gt-模拟信号"><a href="#模拟数据-–-gt-模拟信号" class="headerlink" title="模拟数据 –>模拟信号"></a>模拟数据 –&gt;模拟信号</h4><ul><li><h5 id="调幅AM"><a href="#调幅AM" class="headerlink" title="调幅AM"></a>调幅AM</h5><p>载波振幅随基带数字信号而变化</p></li><li><h5 id="调频FM"><a href="#调频FM" class="headerlink" title="调频FM"></a>调频FM</h5><p>载波频率随基带数字信号而变化</p></li><li><h5 id="调相PM"><a href="#调相PM" class="headerlink" title="调相PM"></a>调相PM</h5><p>载波初始相位随基带数字信号而变化</p></li><li><h5 id="正交振幅调制QAM"><a href="#正交振幅调制QAM" class="headerlink" title="正交振幅调制QAM"></a>正交振幅调制QAM</h5></li></ul></li></ul></li></ul><h2 id="NO-4-1"><a href="#NO-4-1" class="headerlink" title="NO.4"></a>NO.4</h2><ul><li><h3 id="信道极限容量"><a href="#信道极限容量" class="headerlink" title="信道极限容量"></a>信道极限容量</h3><ul><li><h4 id="信噪比"><a href="#信噪比" class="headerlink" title="信噪比"></a>信噪比</h4><p>信噪比(dB) = 10 log10 (S/N)（dB）</p></li><li><h4 id="香农公式"><a href="#香农公式" class="headerlink" title="香农公式"></a>香农公式</h4><p>信道的极限信息传输速率C = W log2 (1+S/N)（bit/s)</p><p>W为信道的带宽，单位：Hz；S为信道内所传信号的平均功率；N为信道内部的高斯噪声功率</p></li></ul></li></ul><h2 id="NO-5-1"><a href="#NO-5-1" class="headerlink" title="NO.5"></a>NO.5</h2><ul><li><h3 id="导引型传输媒体"><a href="#导引型传输媒体" class="headerlink" title="导引型传输媒体"></a>导引型传输媒体</h3><ul><li><h4 id="双绞线"><a href="#双绞线" class="headerlink" title="双绞线"></a>双绞线</h4><ul><li><h5 id="无屏蔽双绞线"><a href="#无屏蔽双绞线" class="headerlink" title="无屏蔽双绞线"></a>无屏蔽双绞线</h5><p>绞合可减少对相邻导线的电磁干扰</p></li><li><h5 id="屏蔽双绞线"><a href="#屏蔽双绞线" class="headerlink" title="屏蔽双绞线"></a>屏蔽双绞线</h5><p>在双绞线外面加一层用金属丝编制称的网</p></li></ul></li><li><h4 id="同轴电缆"><a href="#同轴电缆" class="headerlink" title="同轴电缆"></a>同轴电缆</h4><p>由内导体铜质线芯、绝缘层、网状编制的外导体屏蔽层以及保护塑料外层所组成，抗干扰能力强，广泛用于传输较高速率的数据</p></li><li><h4 id="光缆"><a href="#光缆" class="headerlink" title="光缆"></a>光缆</h4><ul><li><h5 id="多模光纤"><a href="#多模光纤" class="headerlink" title="多模光纤"></a>多模光纤</h5><p>多模光纤可以存在多条不同角度入射的光线在一条光纤中传输，适合近距离传输</p></li><li><h5 id="单模光纤"><a href="#单模光纤" class="headerlink" title="单模光纤"></a>单模光纤</h5><p>光线一直向前传播，而不会产生多次反射</p></li></ul></li></ul></li><li><h3 id="非导引型传输媒介"><a href="#非导引型传输媒介" class="headerlink" title="非导引型传输媒介"></a>非导引型传输媒介</h3><p>无线信道</p></li><li><h3 id="Nbase-2-5-T-F的含义"><a href="#Nbase-2-5-T-F的含义" class="headerlink" title="Nbase-2/5/T/F的含义"></a>Nbase-2/5/T/F的含义</h3><p>10base-2 传输速率是10Mbps,基带传输,最大传输距离185m,传输介质是 细同轴电缆</p><p>10base-5传输速率是10Mbps,基带传输,最大传输距离500m,传输介质是 粗同轴电缆</p><p>10base-T传输速率是10Mbps,基带传输 传输介质是双绞线,</p><p>10base-F传输速率是10Mbps,基带传输,传输介质是光纤</p></li></ul><h2 id="NO-6-1"><a href="#NO-6-1" class="headerlink" title="NO.6"></a>NO.6</h2><ul><li><h3 id="信道复用"><a href="#信道复用" class="headerlink" title="信道复用"></a>信道复用</h3><ul><li><h4 id="频分复用FDM"><a href="#频分复用FDM" class="headerlink" title="频分复用FDM"></a>频分复用FDM</h4><p>将用于传输信道的总带宽划分成若干个子频带（或称子信道），每一个子信道传输一路信号</p></li><li><h4 id="时分复用TDM"><a href="#时分复用TDM" class="headerlink" title="时分复用TDM"></a>时分复用TDM</h4><p>将提供给整个信道传输信息的时间划分成若干时间片(简称时隙)，并将这些时隙分配给每一个信号源使用</p></li><li><h4 id="波分复用WDM"><a href="#波分复用WDM" class="headerlink" title="波分复用WDM"></a>波分复用WDM</h4><p>波分复用即光的频分复用</p></li><li><h4 id="码分复用CDM（或码分多址CDMA）"><a href="#码分复用CDM（或码分多址CDMA）" class="headerlink" title="码分复用CDM（或码分多址CDMA）"></a>码分复用CDM（或码分多址CDMA）</h4><p>每一个用户在同样的时间使用同样的频带进行通信，由于各用户使用不同码型，所以不会造成干扰</p><p>CDMA系统的一个重要特点就是这种体制给每一个站分配的码片序列不仅必须各不相同，而且还必须互相正交</p><p><img src="https://soporbear.github.io/2018/06/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E9%87%8D%E7%82%B9/20180607041739797.png" alt="img"></p><p>Sx · Tx = 0</p></li></ul></li></ul><h2 id="NO-7-1"><a href="#NO-7-1" class="headerlink" title="NO.7"></a>NO.7</h2><ul><li><h3 id="宽带接入技术"><a href="#宽带接入技术" class="headerlink" title="宽带接入技术"></a>宽带接入技术</h3><ul><li><h4 id="ADSL技术"><a href="#ADSL技术" class="headerlink" title="ADSL技术"></a>ADSL技术</h4><p>用数字技术对现有的模拟电话用户线进行改造</p></li><li><h4 id="光纤同轴混合网（HFC网）"><a href="#光纤同轴混合网（HFC网）" class="headerlink" title="光纤同轴混合网（HFC网）"></a>光纤同轴混合网（HFC网）</h4><p>一种在目前覆盖面很广的有限电视网的基础上开发的一种居民宽带接入网，HFC网把原有电视网中同轴电缆主干部分改换为光纤</p></li><li><h4 id="FTTx技术"><a href="#FTTx技术" class="headerlink" title="FTTx技术"></a>FTTx技术</h4><p>光纤到户</p></li></ul></li></ul><h1 id="第三章：数据链路层"><a href="#第三章：数据链路层" class="headerlink" title="第三章：数据链路层"></a>第三章：数据链路层</h1><h2 id="NO-1-2"><a href="#NO-1-2" class="headerlink" title="NO.1"></a>NO.1</h2><ul><li><h3 id="数据链路层的三个基本问题"><a href="#数据链路层的三个基本问题" class="headerlink" title="数据链路层的三个基本问题"></a>数据链路层的三个基本问题</h3><ul><li><h4 id="封装成帧"><a href="#封装成帧" class="headerlink" title="封装成帧"></a>封装成帧</h4><p>在一段数据的前后分别添加首部和尾部，就构成了一个帧，接收端在收到物理层上交的比特流后，就能根据首部和尾部的标记，识别出帧的开始和结束</p><p>首部和尾部的一个重要作用就是</p><p>帧定界</p><p>，此外还包含许多控制信息</p><p>每一种链路层协议都规定了所能传送的帧的</p><p>数据部分长度上限————最大传送单元MTU</p><p>控制字符SOH(Start Of Header)表示首部开始，EOT(End Of Transmission)标识帧的结束</p></li><li><h4 id="透明传输"><a href="#透明传输" class="headerlink" title="透明传输"></a>透明传输</h4><p>无论什么样的比特组合的数据，都能按照原样没有差错地通过这个数据链路层</p><p>为了使数据中可能出现的SOH或EOT在接收端不被解释为控制字符，发送端的数据链路层在数据中出现的控制字符SOH或EOT或ESC的前面插入一个转义字符ESC，在接收端的数据链路层在把数据送往网络层之前删除这个插入的转义字符，这叫做</p><p>字节填充</p><p>或</p><p>字符填充</p></li><li><h4 id="差错检测"><a href="#差错检测" class="headerlink" title="差错检测"></a>差错检测</h4><p>比特在传输过程中可能会产生差错，在一段时间内，传输错误的比特占传输比特总数的比特率称为误码率BER(Bit Error Rate)</p><p>为了保证数据传输可靠性，必须采用差错检测措施</p></li></ul></li></ul><h2 id="NO-2-2"><a href="#NO-2-2" class="headerlink" title="NO.2"></a>NO.2</h2><ul><li><h3 id="循环冗余校验CRC"><a href="#循环冗余校验CRC" class="headerlink" title="循环冗余校验CRC"></a>循环冗余校验CRC</h3><ol><li>在发送端先把数据划分为组，每组k个比特，其中一组为M</li><li>事先商定好一个(n+1)位的数P，并在M后面添加n个0</li><li>用得到的(k+n)位的数除以P，得出商Q(没有用)和n位的余数R</li><li>余数R作为冗余码拼接在M的后面发送出去</li><li>在接收端把收到的帧除以P，检查余数是否为0</li></ol><p>这种为了进行检错而添加的冗余码称为<strong>帧检验序列FCS</strong><br>CRC仅能做到<strong>无差错接受</strong>，而非<strong>可靠传输</strong></p></li></ul><h2 id="NO-3-2"><a href="#NO-3-2" class="headerlink" title="NO.3"></a>NO.3</h2><ul><li>对于通信质量良好的有线链路，数据链路层协议不使用确认和重传机制，即不要求其提供可靠传输的服务，可靠传输由传输层完成</li><li>对于通信质量差的无线链路，需要考虑帧丢失、帧出错和帧重复，采用了帧编号、确认和重传机制</li></ul><h2 id="NO-4-2"><a href="#NO-4-2" class="headerlink" title="NO.4"></a>NO.4</h2><ul><li><h3 id="零比特填充"><a href="#零比特填充" class="headerlink" title="零比特填充"></a>零比特填充</h3><p>PPP协议用在SONET/SDH链路时，使用同步传输（一连串的比特流连续传输），这种情况下，PPP协议采用零比特填充方法来实现透明传输</p><p>具体做法：在发送端，先扫描整个信息字段，只要发现有五个连续的1，立即填入一个0，接收端相反</p></li></ul><h2 id="NO-5-2"><a href="#NO-5-2" class="headerlink" title="NO.5"></a>NO.5</h2><ul><li><h3 id="局域网的介质访问控制"><a href="#局域网的介质访问控制" class="headerlink" title="局域网的介质访问控制"></a>局域网的介质访问控制</h3><ul><li><h4 id="CSMA-CD协议"><a href="#CSMA-CD协议" class="headerlink" title="CSMA/CD协议"></a>CSMA/CD协议</h4><p>载波监听多点接入/碰撞检测，要点：</p><ul><li><h5 id="多点接入"><a href="#多点接入" class="headerlink" title="多点接入"></a>多点接入</h5><p>总线型网络，许多计算机以多点接入的方式连接在一起</p></li><li><h5 id="载波监听"><a href="#载波监听" class="headerlink" title="载波监听"></a>载波监听</h5><p>用电子技术检测总线上有没有其他计算机也在发送，即检测信道，不管在发送前还是发送中，每个站都必须不停地检测信道</p></li><li><h5 id="碰撞检测"><a href="#碰撞检测" class="headerlink" title="碰撞检测"></a>碰撞检测</h5><p>即边发送边监听，也称冲突检测</p></li></ul></li><li><h4 id="以太网的最短帧长"><a href="#以太网的最短帧长" class="headerlink" title="以太网的最短帧长"></a>以太网的最短帧长</h4><p>64B即512bit，凡小于64字节的帧都是由于冲突而异常终止的无效帧</p></li></ul></li></ul><h2 id="NO-6-2"><a href="#NO-6-2" class="headerlink" title="NO.6"></a>NO.6</h2><ul><li><h3 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h3><p>在局域网中，</p><p>硬件地址</p><p>也称</p><p>物理地址</p><p>或</p><p>MAC地址</p><p>，每个主机可用MAC来标识它在局域网中的地址</p></li></ul><h2 id="NO-7-2"><a href="#NO-7-2" class="headerlink" title="NO.7"></a>NO.7</h2><ul><li><h3 id="以太网的扩展与碰撞域的概念"><a href="#以太网的扩展与碰撞域的概念" class="headerlink" title="以太网的扩展与碰撞域的概念"></a>以太网的扩展与碰撞域的概念</h3><ul><li><h4 id="物理层扩展（集线器）"><a href="#物理层扩展（集线器）" class="headerlink" title="物理层扩展（集线器）"></a>物理层扩展（集线器）</h4><p>在每个系的以太网互连起来之前，每一个系的以太网是一个独立的</p><p>碰撞域</p><p>（或</p><p>冲突域</p><p>），最大吞吐量为每个系最大吞吐量总和，通过集线器互连以后就变成了一个大的碰撞域，某个系的两个站在通信时所传送的数据会通过所有的集线器进行转发，当某个系的两个站通信时，传输数据会通过所有集线器进行转发，使其他系内部不能通信</p></li><li><h4 id="数据链路层扩展（网桥-交换机）"><a href="#数据链路层扩展（网桥-交换机）" class="headerlink" title="数据链路层扩展（网桥/交换机）"></a>数据链路层扩展（网桥/交换机）</h4><ul><li><strong>网桥</strong>的作用是对其收到的帧根据MAC帧的目的地址进行转发和过滤，和集线器不同，网桥并不会向所有接口转发，而是根据MAC地址，查找地址表，然后转发或丢弃</li><li><strong>交换式集线器</strong>（又称第二层交换机）就是一个多接口的网桥，它具有并行性，能使多对主机同时通信（网桥一次只能转发一个帧），交换机内部有一个通过<strong>自学习</strong>算法建立起来的帧<strong>交换表</strong></li></ul></li><li><h4 id="网桥-交换机与集线器相比的优点"><a href="#网桥-交换机与集线器相比的优点" class="headerlink" title="网桥/交换机与集线器相比的优点"></a>网桥/交换机与集线器相比的优点</h4><p>因为网桥/交换机具有缓存功能，它可以将不同拓扑结构的、不同帧格式的、不同传输速率的网络连接起来</p></li></ul></li></ul><h1 id="第四章：网络层"><a href="#第四章：网络层" class="headerlink" title="第四章：网络层"></a>第四章：网络层</h1><h2 id="NO-1-3"><a href="#NO-1-3" class="headerlink" title="NO.1"></a>NO.1</h2><ul><li><h3 id="互联网中网络层的设计思路"><a href="#互联网中网络层的设计思路" class="headerlink" title="互联网中网络层的设计思路"></a>互联网中网络层的设计思路</h3><p>网络层只提供简单灵活的、无连接的、仅最大努力交付的数据包服务，流量控制和差错处理交给传输层来完成</p></li></ul><h2 id="NO-2-3"><a href="#NO-2-3" class="headerlink" title="NO.2"></a>NO.2</h2><ul><li><h3 id="网络互连的概念"><a href="#网络互连的概念" class="headerlink" title="网络互连的概念"></a>网络互连的概念</h3><p>中间设备利用转发器(集线器)或网桥（包括以太网交换机）时，只是把一个相同网段的主机连在了一起，只是把网络规模扩大了，这仍然是一个网络，不将其称作网络互连</p><p>而中间设备使用路由器时，将不同网段的网络连在了一起，主机通信过程中涉及到路由选择问题，这时才称作网络互连</p><p>集线器、网桥、以太网交换机/第二层交换机只是扩大了网络范围，而路由器能实现网络互连</p></li></ul><h2 id="NO-3-3"><a href="#NO-3-3" class="headerlink" title="NO.3"></a>NO.3</h2><ul><li><h3 id="分类IP地址"><a href="#分类IP地址" class="headerlink" title="分类IP地址"></a>分类IP地址</h3><p><img src="https://soporbear.github.io/2018/06/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E9%87%8D%E7%82%B9/20180614104014355.png" alt="img"></p></li><li><h4 id="特殊地址"><a href="#特殊地址" class="headerlink" title="特殊地址"></a>特殊地址</h4><p><img src="https://soporbear.github.io/2018/06/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E9%87%8D%E7%82%B9/20180614104239150.png" alt="img"></p></li></ul><h2 id="NO-4-3"><a href="#NO-4-3" class="headerlink" title="NO.4"></a>NO.4</h2><ul><li><h3 id="地址解析协议ARP"><a href="#地址解析协议ARP" class="headerlink" title="地址解析协议ARP"></a>地址解析协议ARP</h3><ul><li><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>解决同一局域网上的IP地址和MAC地址的映射问题，将IP地址映射为MAC地址。</p></li></ul></li></ul><h2 id="NO-5-3"><a href="#NO-5-3" class="headerlink" title="NO.5"></a>NO.5</h2><ul><li><h3 id="IP数据报"><a href="#IP数据报" class="headerlink" title="IP数据报"></a>IP数据报</h3><p><img src="https://soporbear.github.io/2018/06/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E9%87%8D%E7%82%B9/%E7%89%B9%E5%88%AB%E8%A6%81%E6%8E%8C%E6%8F%A1%E5%88%86%E7%89%87%E9%97%AE%E9%A2%98%EF%BC%88%E5%9B%BE130%E8%A1%A84-5%E6%80%8E%E4%B9%88%E6%9D%A5%E7%9A%84%EF%BC%89.png" alt="img"></p></li><li><h3 id="分片"><a href="#分片" class="headerlink" title="分片"></a>分片</h3><p>以太网规定其</p><p>最大传送单元MTU</p><p>为1500字节，若超长则必须进行分片处理</p><p>IP协议规定，互联网中所有主机和路由，必须能接受长度不超过576B(512B(合理的长度)+60B(最长的IP首部)+4B(富余量))的数据包，若数据报超过576B目的主机无法接收，则进行分片</p><ul><li><h4 id="标识"><a href="#标识" class="headerlink" title="标识"></a>标识</h4><p>相同标识的分组数据包组装为原来的数据包</p></li><li><h4 id="标志"><a href="#标志" class="headerlink" title="标志"></a>标志</h4><ul><li><h5 id="最低位MF"><a href="#最低位MF" class="headerlink" title="最低位MF"></a>最低位<strong>MF</strong></h5><p>MF = 1，还有分片；MF = 0，已是最后一个</p></li><li><h5 id="中间一位DF"><a href="#中间一位DF" class="headerlink" title="中间一位DF"></a>中间一位<strong>DF</strong></h5><p>DF = 1，不能分片；DF = 0，允许分片</p></li></ul></li><li><h4 id="片偏移"><a href="#片偏移" class="headerlink" title="片偏移"></a>片偏移</h4><p>分片在原分组中的相对位置，以8个字节为偏移单位</p><h2 id="NO-6-3"><a href="#NO-6-3" class="headerlink" title="NO.6"></a>NO.6</h2></li></ul></li><li><h3 id="子网划分"><a href="#子网划分" class="headerlink" title="子网划分"></a>子网划分</h3><ul><li><h4 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h4><p><img src="https://soporbear.github.io/2018/06/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E9%87%8D%E7%82%B9/20180614110600365.png" alt="img"></p></li></ul></li></ul><h2 id="NO-7-3"><a href="#NO-7-3" class="headerlink" title="NO.7"></a>NO.7</h2><ul><li><h3 id="CIDR（无类域间路由）"><a href="#CIDR（无类域间路由）" class="headerlink" title="CIDR（无类域间路由）"></a>CIDR（无类域间路由）</h3><ul><li>CIDR消除了传统的A/B/C类地址以及划分子网的概念</li><li>CIDR使用地址掩码来标识网络前缀（用来指明网络），也可继续称为子网掩码</li><li>使用斜线记法：128/8等价于128.0.0.0/8</li></ul></li></ul><h2 id="NO-8"><a href="#NO-8" class="headerlink" title="NO.8"></a>NO.8</h2><ul><li><h3 id="最长前缀匹配"><a href="#最长前缀匹配" class="headerlink" title="最长前缀匹配"></a>最长前缀匹配</h3><p>查找路由表时，应从匹配结果中选择具有最长网络前缀的路由，又称</p><p>最长匹配</p><p>或</p><p>最佳匹配</p></li></ul><h2 id="NO-9"><a href="#NO-9" class="headerlink" title="NO.9"></a>NO.9</h2><ul><li><h3 id="路由聚合"><a href="#路由聚合" class="headerlink" title="路由聚合"></a>路由聚合</h3><p>在路由表中利用CIDR地址块来查找目的网络，这种地址的聚合称为路由聚合</p><p><img src="https://soporbear.github.io/2018/06/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E9%87%8D%E7%82%B9/20180614112555090.png" alt="img"></p></li></ul><h2 id="NO-10"><a href="#NO-10" class="headerlink" title="NO.10"></a>NO.10</h2><ul><li><h3 id="RIP协议"><a href="#RIP协议" class="headerlink" title="RIP协议"></a>RIP协议</h3><ul><li><h4 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h4><p>一种分布式的基于距离向量的路由选择协议</p></li><li><h4 id="距离向量算法"><a href="#距离向量算法" class="headerlink" title="距离向量算法"></a>距离向量算法</h4><ol><li><p>对地址为X的相邻路由器发送过来的RIP报文（目的网络N，距离d，下一跳路由器X），将此报文中的的所有下一跳地址改为X并把距离字段值加1</p></li><li><p>若原来的路由表没有目的网络N，则添加到路由表，若有网络N且原来的下一跳路由器地址为X，则替换掉原来的（以最新消息为准），若有网络N且下一跳地址不是X，则比较距离大小，更新为更小的那个</p></li><li><p>若3分钟未收到更新路由表，则把距离置为16（16表示不可达）</p><h2 id="NO-11"><a href="#NO-11" class="headerlink" title="NO.11"></a>NO.11</h2></li></ol></li></ul></li><li><h3 id="Ping与ICMP协议"><a href="#Ping与ICMP协议" class="headerlink" title="Ping与ICMP协议"></a>Ping与ICMP协议</h3><p>Ping是应用层直接使用网络层ICMP（网际控制报文协议）的一个例子，它没有通过运输层的TCP或UDP</p></li></ul><h2 id="NO-12"><a href="#NO-12" class="headerlink" title="NO.12"></a>NO.12</h2><ul><li><h3 id="VPN和NAT"><a href="#VPN和NAT" class="headerlink" title="VPN和NAT"></a>VPN和NAT</h3><ul><li><h4 id="本地地址"><a href="#本地地址" class="headerlink" title="本地地址"></a>本地地址</h4><p>在所有路由器中，对以下</p><p>专用地址</p><p>数据报一律不进行转发</p></li></ul><ol><li>10.0.0.0 - 10.255.255.255（10.0.0.0/8 24位块）</li><li>172.16.0.0 - 172.31.255.255（172.16.0.0/12 20位块）</li><li>192.168.0.0 - 192.168.255.255（192.168.0.0/16 16位块）<br>采用专用IP地址的互连网称为<strong>专用互联网</strong>或<strong>本地互联网</strong>，专用IP地址又称<strong>可重用地址</strong><br>利用公用互联网作为本机构各个专用网之间的通信载体，这样的专用网又称<strong>虚拟专用网VPN</strong></li></ol><ul><li><h4 id="网络地址转换协议NAT"><a href="#网络地址转换协议NAT" class="headerlink" title="网络地址转换协议NAT"></a>网络地址转换协议NAT</h4><p>NAT路由器的NAT转换表</p><p><img src="https://soporbear.github.io/2018/06/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E9%87%8D%E7%82%B9/20180614114708100.png" alt="img"></p></li><li><h4 id="网络地址与端口号转换NAPT"><a href="#网络地址与端口号转换NAPT" class="headerlink" title="网络地址与端口号转换NAPT"></a>网络地址与端口号转换NAPT</h4><p>即使用端口号的NAPT，可以使多个拥有本地地址的主机，共用一个NAT路由器上的全球IP地址</p></li></ul></li></ul><h2 id="NO-13"><a href="#NO-13" class="headerlink" title="NO.13"></a>NO.13</h2><ul><li><h3 id="自治系统内部的路由选择协议IGP"><a href="#自治系统内部的路由选择协议IGP" class="headerlink" title="自治系统内部的路由选择协议IGP"></a>自治系统内部的路由选择协议IGP</h3><p>RIP,OSPF属于IGP</p></li><li><h3 id="自洽系统之间的路由选择协议EGP"><a href="#自洽系统之间的路由选择协议EGP" class="headerlink" title="自洽系统之间的路由选择协议EGP"></a>自洽系统之间的路由选择协议EGP</h3><p>BGP属于EGP</p></li></ul><h1 id="第五章：传输层"><a href="#第五章：传输层" class="headerlink" title="第五章：传输层"></a>第五章：传输层</h1><h2 id="NO-1-4"><a href="#NO-1-4" class="headerlink" title="NO.1"></a>NO.1</h2><ul><li><h3 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h3><p>运输层从IP层收到发送给各应用进程的数据后，必须分别交付指明的各应用进程，这时使用16位的</p><p>端口号</p><p>来赋予进程标志</p></li><li><h3 id="套接字"><a href="#套接字" class="headerlink" title="套接字"></a>套接字</h3><p>TCP连接的断电叫做</p><p>套接字（socket）</p><p>或</p><p>插口</p><p>套接字 socket = （IP地址：端口号）</p></li></ul><h2 id="NO-2-4"><a href="#NO-2-4" class="headerlink" title="NO.2"></a>NO.2</h2><ul><li><h3 id="服务端使用的熟知端口号"><a href="#服务端使用的熟知端口号" class="headerlink" title="服务端使用的熟知端口号"></a>服务端使用的熟知端口号</h3><p>FTP: 21</p><p>HTTP:80</p><p>TFTP: 69</p><p>SMTP: 25</p><p>TELNET:23</p><p>POP: 120</p></li></ul><h2 id="NO-3-4"><a href="#NO-3-4" class="headerlink" title="NO.3"></a>NO.3</h2><ul><li><h3 id="TCP报文段首部格式"><a href="#TCP报文段首部格式" class="headerlink" title="TCP报文段首部格式"></a>TCP报文段首部格式</h3><p><img src="https://soporbear.github.io/2018/06/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E9%87%8D%E7%82%B9/20180615121029018.png" alt="img"></p><ul><li><h4 id="序号（4B）"><a href="#序号（4B）" class="headerlink" title="序号（4B）"></a>序号（4B）</h4><p>TCP连接中的每一个</p><p>字节</p><p>都按顺序编号，首部中的序号的本报文段发送数据的第一个字节的序号</p></li><li><h4 id="确认号（4B）"><a href="#确认号（4B）" class="headerlink" title="确认号（4B）"></a>确认号（4B）</h4><p>期望收到对方下一个报文段的第一个数据字节的序号</p><p>若确认号=N，则到序号N-1为止的所有数据都已正确收到</p></li><li><h4 id="确认-ACK"><a href="#确认-ACK" class="headerlink" title="确认 ACK"></a>确认 ACK</h4><p>ACK=1时确认号字段才有效</p><p>TCP规定，在连接建立后所有传送的报文段都必须把ACK置1</p></li><li><h4 id="同步-SYN"><a href="#同步-SYN" class="headerlink" title="同步 SYN"></a>同步 SYN</h4><p>在连接时用来同步序号</p><p>若SYN=1而ACK=0，表示这是一个请求连接报文</p><p>若SYN=1且ACK=1，表示同意连接</p></li><li><h4 id="终止-FIN"><a href="#终止-FIN" class="headerlink" title="终止 FIN"></a>终止 FIN</h4><p>FIN=1时，要求释放连接</p></li></ul></li></ul><h2 id="NO-4-4"><a href="#NO-4-4" class="headerlink" title="NO.4"></a>NO.4</h2><ul><li><h3 id="UDP协议的特点"><a href="#UDP协议的特点" class="headerlink" title="UDP协议的特点"></a>UDP协议的特点</h3><ol><li>UDP是无连接的</li><li>UDP使用尽最大努力交付</li><li>UDP是面向报文的</li><li>UDP没有拥塞控制</li><li>UDP支持一对一、一对多、多对一和多对多的交互通信</li><li>UDP的首部开销小</li></ol></li><li><h3 id="TCP协议的特点"><a href="#TCP协议的特点" class="headerlink" title="TCP协议的特点"></a>TCP协议的特点</h3><ol><li>TCP是面向连接的运输层协议</li><li>每一条TCP连接只能有两个端点，每一条TCP连接只能是点对点（一对一）的</li><li>TCP提供可靠交付的服务</li><li>TCP提供全双工通信</li><li>面向字节流</li></ol></li></ul><h2 id="NO-5-4"><a href="#NO-5-4" class="headerlink" title="NO.5"></a>NO.5</h2><ul><li><h3 id="TCP中的差错控制"><a href="#TCP中的差错控制" class="headerlink" title="TCP中的差错控制"></a>TCP中的差错控制</h3><ul><li><h4 id="停止等待协议"><a href="#停止等待协议" class="headerlink" title="停止等待协议:"></a>停止等待协议:</h4><p>即发送窗口WS=1，接收窗口WR=1，当收到确认后再发送下一个报文</p><ul><li><h5 id="停等协议中的确认丢失或迟到"><a href="#停等协议中的确认丢失或迟到" class="headerlink" title="停等协议中的确认丢失或迟到"></a>停等协议中的确认丢失或迟到</h5><p>接收方收到重传的分组时：</p></li></ul><ol><li>丢弃这个重复的分组</li><li>向A发送确认<br>注意：1）这两种协议对出错和失序的报文，接收端不做响应，发送方确认等待超时进行</li></ol></li><li><h4 id="连续ARQ的累计确认技术"><a href="#连续ARQ的累计确认技术" class="headerlink" title="连续ARQ的累计确认技术"></a>连续ARQ的累计确认技术</h4><p>接收方不必对收到的分组逐个发送确认，而是在收到几个分组后，对按序到达的最后一个分组发送确认</p></li></ul></li></ul><h2 id="NO-6-4"><a href="#NO-6-4" class="headerlink" title="NO.6"></a>NO.6</h2><ul><li><h3 id="报文往返时间RTT的计算"><a href="#报文往返时间RTT的计算" class="headerlink" title="报文往返时间RTT的计算"></a>报文往返时间RTT的计算</h3><p>新的RTTs = (1-α)×旧的RTTs+α×新的RTT样本</p><p>α=1/8</p><p>超时重传时间RTO=RTTs+4·RTTd</p><p>新的RTTd=（1-β）·旧的RTTd+β·|RTTs-新的RTT样本|</p><p>β=1/4</p></li></ul><h2 id="NO-7-4"><a href="#NO-7-4" class="headerlink" title="NO.7"></a>NO.7</h2><ul><li><h3 id="TCP的拥塞控制"><a href="#TCP的拥塞控制" class="headerlink" title="TCP的拥塞控制"></a>TCP的拥塞控制</h3><p>TCP拥塞窗口单位实际上为字节数，这里假定使用报文个数</p><ul><li><h4 id="慢开始"><a href="#慢开始" class="headerlink" title="慢开始"></a>慢开始</h4><ul><li><p>初始拥塞窗口cwnd=2或4个发送方的最大报文段SMSS的数值</p></li><li><p>每收到一个对新报文段的确认后，可以把cwnd增加最多一个SMSS的数值<br>Δcwnd = min（N，SMSS）</p></li><li><p>每经过一个<strong>传输轮次</strong>，cwnd就加倍（cwnd=1/2/4/8/……）</p></li><li><p>为防止cwnd增长过快，设置了一个</p><p>慢开始门限ssthresh</p><ul><li>cwnd&lt;ssthresh时，使用慢开始算法</li><li>cwnd&gt;ssthresh时，使用拥塞避免算法</li><li>cwnd=ssthresh时，两者皆可使用</li></ul></li></ul></li><li><h4 id="拥塞避免"><a href="#拥塞避免" class="headerlink" title="拥塞避免"></a>拥塞避免</h4><ul><li>拥塞避免阶段cwnd呈<strong>加法增大</strong>，按线性规律缓慢增长</li><li>出现超时时，发送方判断为网络拥塞，调整ssthresh=cwnd/2，同时设置cwnd=1，进入慢开始阶段</li></ul></li><li><h4 id="快重传"><a href="#快重传" class="headerlink" title="快重传"></a>快重传</h4><ul><li>快重传要求即使收到了失序的报文段也要立即发送确认</li><li>发送方只要一连收到3个重复确认，就立即进行重传，同时使用快恢复</li></ul></li><li><h4 id="快恢复"><a href="#快恢复" class="headerlink" title="快恢复"></a>快恢复</h4><ul><li>ssthresh=cwnd/2</li></ul></li></ul></li></ul><h2 id="NO-8-1"><a href="#NO-8-1" class="headerlink" title="NO.8"></a>NO.8</h2><ul><li><h3 id="TCP连接管理"><a href="#TCP连接管理" class="headerlink" title="TCP连接管理"></a>TCP连接管理</h3><ul><li><h4 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h4><p><img src="https://soporbear.github.io/2018/06/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E9%87%8D%E7%82%B9/20180615122917829.png" alt="img"></p></li><li><h4 id="连接释放"><a href="#连接释放" class="headerlink" title="连接释放"></a>连接释放</h4><p><img src="https://soporbear.github.io/2018/06/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E9%87%8D%E7%82%B9/20180615123115000.png" alt="img"></p></li></ul></li></ul><h1 id="第六章：应用层"><a href="#第六章：应用层" class="headerlink" title="第六章：应用层"></a>第六章：应用层</h1><h2 id="NO-1-5"><a href="#NO-1-5" class="headerlink" title="NO.1"></a>NO.1</h2><ul><li><h3 id="常见的应用层协议"><a href="#常见的应用层协议" class="headerlink" title="常见的应用层协议"></a>常见的应用层协议</h3><ul><li><h4 id="域名系统DNS"><a href="#域名系统DNS" class="headerlink" title="域名系统DNS"></a>域名系统DNS</h4></li><li><h4 id="文件传输协议FTP"><a href="#文件传输协议FTP" class="headerlink" title="文件传输协议FTP"></a>文件传输协议FTP</h4></li><li><h4 id="简单文件传输协议TFTP"><a href="#简单文件传输协议TFTP" class="headerlink" title="简单文件传输协议TFTP"></a>简单文件传输协议TFTP</h4></li><li><h4 id="简单邮件传输协议SMTP"><a href="#简单邮件传输协议SMTP" class="headerlink" title="简单邮件传输协议SMTP"></a>简单邮件传输协议SMTP</h4></li><li><h4 id="邮件读取协议POP"><a href="#邮件读取协议POP" class="headerlink" title="邮件读取协议POP"></a>邮件读取协议POP</h4></li><li><h4 id="超文本传输协议HTTP"><a href="#超文本传输协议HTTP" class="headerlink" title="超文本传输协议HTTP"></a>超文本传输协议HTTP</h4></li><li><h4 id="动态主机配置协议DHCP"><a href="#动态主机配置协议DHCP" class="headerlink" title="动态主机配置协议DHCP"></a>动态主机配置协议DHCP</h4></li></ul></li></ul><h2 id="NO-2-5"><a href="#NO-2-5" class="headerlink" title="NO.2"></a>NO.2</h2><p>TFTP和DHCP在传输层上使用了UDP协议<br>DNS，FTP，SMTP，POP，HTTP在传输层上采用TCP连接</p><h2 id="NO-3-5"><a href="#NO-3-5" class="headerlink" title="NO.3"></a>NO.3</h2><p>应用层协议都是基于客户/服务器方式运行的</p><h2 id="NO-4-5"><a href="#NO-4-5" class="headerlink" title="NO.4"></a>NO.4</h2><p>用户代理发送邮件收发时，用户代理与发送方邮件服务器是用SMTP协议，发送方邮件服务器和接收方邮件服务器也是用SMTP协议，而收信时用户代理和接收方邮件服务器是POP协议</p><h2 id="NO-5-5"><a href="#NO-5-5" class="headerlink" title="NO.5"></a>NO.5</h2><ul><li><h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><p><img src="https://soporbear.github.io/2018/06/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E9%87%8D%E7%82%B9/20180615090204660.png" alt="img"></p></li></ul><h2 id="NO-6-5"><a href="#NO-6-5" class="headerlink" title="NO.6"></a>NO.6</h2><ul><li><h3 id="URL的含义"><a href="#URL的含义" class="headerlink" title="URL的含义"></a>URL的含义</h3><p>统一定位资源符URL</p><p>的格式：</p><p>&lt;协议&gt;：//&lt;主机&gt;：&lt;端口&gt;/&lt;路径&gt;</p></li></ul><h1 id="第七章：网络安全"><a href="#第七章：网络安全" class="headerlink" title="第七章：网络安全"></a>第七章：网络安全</h1><h2 id="NO-1-6"><a href="#NO-1-6" class="headerlink" title="NO.1"></a>NO.1</h2><p>被动攻击：截获<br>主动攻击：篡改、伪造身份、拒绝服务</p><h2 id="NO-2-6"><a href="#NO-2-6" class="headerlink" title="NO.2"></a>NO.2</h2><ul><li><h3 id="对称秘钥体系：DES"><a href="#对称秘钥体系：DES" class="headerlink" title="对称秘钥体系：DES"></a>对称秘钥体系：DES</h3><p>DES：秘钥是保密的，算法是公开的；加密和解密采用同样的秘钥K1=K2=K，Dk(Ek(x))=x</p></li><li><h3 id="公开秘钥体系：RSA"><a href="#公开秘钥体系：RSA" class="headerlink" title="公开秘钥体系：RSA"></a>公开秘钥体系：RSA</h3><p>RSA中加密秘钥pk是公开的，而解密秘钥sk是需要保密的，加解密算法E,D也是公开的</p><p>注意：Dpk(Epk(x))≠x, 但是</p><p>Dsk(Epk(x))=x 以及 Epk(Dsk(x))=x，</p><p>其中Epk(Dsk(x))=x这个原则用在数字签名上</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 复习 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>物联网复习</title>
      <link href="2020/11/26/%E7%89%A9%E8%81%94%E7%BD%91%E5%A4%8D%E4%B9%A0/"/>
      <url>2020/11/26/%E7%89%A9%E8%81%94%E7%BD%91%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="一-概述"><a href="#一-概述" class="headerlink" title="一.概述"></a>一.概述</h3><h4 id="1-物联网English-★"><a href="#1-物联网English-★" class="headerlink" title="1.物联网English ★"></a>1.物联网English ★</h4><p>​        <strong>INTERNET OF THINGS</strong>（ IOT ）</p><h4 id="2-物联网定义"><a href="#2-物联网定义" class="headerlink" title="2.物联网定义"></a>2.物联网定义</h4><p>​        物联网是具有自我标识、感知和智能的物理实体基于通信技术相互连接形成的网络，这些物理设备可以在无需人工干预的条件下实现协同和互动，为人们提供智慧和集约的服务。传感网是物联网的基础，是物联网的组成部分。</p><h4 id="3-物联网三层体系结构-★"><a href="#3-物联网三层体系结构-★" class="headerlink" title="3.物联网三层体系结构 ★"></a>3.物联网三层体系结构 ★</h4><h5 id="感知层-★"><a href="#感知层-★" class="headerlink" title="感知层 ★"></a>感知层 ★</h5><p>​        <strong>感知层是物联网的皮肤和五官——识别物体，采集信息。</strong>1.感知和识别物体，采集和捕获信息；2.完成信息的收集与简单处理；3.主要由传统的WSN、RFID和执行器组成。</p><a id="more"></a><h5 id="网络层-★"><a href="#网络层-★" class="headerlink" title="网络层 ★"></a>网络层 ★</h5><p>​        <strong>网络层是物联网的神经中枢和大脑——信息传递和处理。</strong>1.建立在现有的移动通讯网和互联网基础上，主要完成信息的远距离传输等功能；2.网络层包括各种通信网络与互联网形成的融合网络；3.网络层是物联网成为普遍服务的基础设施，有待突破的方向是向下与感知层的结合，向上与应用层的结合。</p><h5 id="应用层-★"><a href="#应用层-★" class="headerlink" title="应用层 ★"></a>应用层 ★</h5><p>​        <strong>应用层是物联网的“社会分工”——与行业需求结合，实现广泛智能化。</strong>1.主要完成服务发现和服务呈现的工作，将物联网技术与行业专业技术相结合，实现广泛智能化应用的解决方案集；2.物联网通过应用层最终实现信息技术与行业的深度融合，对国民经济和社会发展具有广泛影响；3.应用层的关键问题在于信息的社会化共享，以及信息安全的保障。</p><h3 id="二-传感器"><a href="#二-传感器" class="headerlink" title="二.传感器"></a>二.传感器</h3><h4 id="1-传感器的组成-★"><a href="#1-传感器的组成-★" class="headerlink" title="1.传感器的组成  ★"></a>1.传感器的组成  ★</h4><h5 id="敏感元件-★"><a href="#敏感元件-★" class="headerlink" title="敏感元件 ★"></a>敏感元件 ★</h5><p>​        是直接感受被测量，并输出与被测量成确定关系的某一物理量的元件。</p><h5 id="转换元件-★"><a href="#转换元件-★" class="headerlink" title="转换元件 ★"></a>转换元件 ★</h5><p>​        敏感元件的输出就是它的输入，把输入转换成电路参量。</p><h5 id="测量电路-★"><a href="#测量电路-★" class="headerlink" title="测量电路 ★"></a>测量电路 ★</h5><p>​        将转换元件输出的电量变换为便于显示、记录、控制、处理的有用电信号。</p><h4 id="2-传感器的静态特性-★"><a href="#2-传感器的静态特性-★" class="headerlink" title="2.传感器的静态特性 ★"></a>2.传感器的静态特性 ★</h4><h5 id="线性度-★"><a href="#线性度-★" class="headerlink" title="线性度 ★"></a>线性度 ★</h5><p>​        指其输出量与输入量之间的实际关系曲线（即静特征曲线）偏离直线的程度，又称非线性误差。</p><h5 id="灵敏度-★"><a href="#灵敏度-★" class="headerlink" title="灵敏度 ★"></a>灵敏度 ★</h5><p>​        指传感器在稳态下的输出变化量△Y与引起变化的输入变化△X之比。</p><h5 id="迟滞-★"><a href="#迟滞-★" class="headerlink" title="迟滞 ★"></a>迟滞 ★</h5><p>​        传感器在正（输入量增大）和反（输入量减小）行程期间，其输出-输入特性曲线不重合的现象称为迟滞。</p><h5 id="重复性-★"><a href="#重复性-★" class="headerlink" title="重复性 ★"></a>重复性 ★</h5><p>​        在输入按同一方向连续多次变动时得到特性曲线不一致的程度。</p><h5 id="分辨率-★"><a href="#分辨率-★" class="headerlink" title="分辨率 ★"></a>分辨率 ★</h5><p>​        在测量方位内所能测量输入量的最小变化量△X。</p><h5 id="飘移-★"><a href="#飘移-★" class="headerlink" title="飘移 ★"></a>飘移 ★</h5><p>​        在外界的干扰下，输出量发生与输入量无关的变化。</p><h4 id="3-传感器类型-★"><a href="#3-传感器类型-★" class="headerlink" title="3.传感器类型 ★"></a>3.传感器类型 ★</h4><h5 id="3-1电阻式传感器–应变片式传感器"><a href="#3-1电阻式传感器–应变片式传感器" class="headerlink" title="3.1电阻式传感器–应变片式传感器"></a>3.1电阻式传感器–应变片式传感器</h5><h6 id="3-1-1原理-★"><a href="#3-1-1原理-★" class="headerlink" title="3.1.1原理 ★"></a>3.1.1原理 ★</h6><p>​        金属导体或者半导体在受<strong>外力作用</strong>时，会<strong>产生相应的应变</strong>，其<strong>阻值也随之发生变化</strong>，这种物理现象称作应变效应（卡尔文效应）。</p><h6 id="3-1-2实例"><a href="#3-1-2实例" class="headerlink" title="3.1.2实例"></a>3.1.2实例</h6><p>​        电子秤 / 高精度电子汽车衡 / 机械秤包装机 / 荷重传感器 / 桥墩</p><h6 id="3-1-3电桥-★"><a href="#3-1-3电桥-★" class="headerlink" title="3.1.3电桥 ★"></a>3.1.3电桥 ★</h6><p>​    通过测量电压变化，间接的测量压力变化</p><hr><p>​        <strong>单臂电桥（惠斯通电桥）</strong>  <strong>k = 1/4U</strong> ★        <img src="https://i.loli.net/2020/09/16/nUqKXxiwDLt2WJC.png" style="zoom: 80%;"></p><hr><p>​        <strong>双臂电桥（半差动电桥）</strong> <strong>k = 1/2U</strong> ★        <img src="https://i.loli.net/2020/09/16/jY7wPHdJ6zMaKNA.png" style="zoom:80%;"></p><hr><p>​        <strong>全桥电路</strong>  <strong>k = U</strong> ★                                    <img src="https://i.loli.net/2020/09/16/lphF2fRcCst78r3.png" style="zoom:80%;"></p><h5 id="3-2电感式传感器–变磁阻式（自感）传感器"><a href="#3-2电感式传感器–变磁阻式（自感）传感器" class="headerlink" title="3.2电感式传感器–变磁阻式（自感）传感器"></a>3.2电感式传感器–变磁阻式（自感）传感器</h5><h6 id="3-2-1原理-★"><a href="#3-2-1原理-★" class="headerlink" title="3.2.1原理 ★"></a>3.2.1原理 ★</h6><p>​        利用<strong>电磁感应原理</strong>将<strong>被测非电量</strong>如位移、压力、流量、振动等<strong>转换成线圈自感量L或互感量M的变化</strong>，再由<strong>测量电路转换为电压或电流的变化量</strong>输出，这种装置称为电感式传感器。</p><h6 id="3-2-2实例"><a href="#3-2-2实例" class="headerlink" title="3.2.2实例"></a>3.2.2实例</h6><p>​        <strong>电感式滚柱直径分选装置</strong> / 非接触式位移传感器 / 测厚传感器 / 接近式传感器 / 电感粗糙度仪 / 变隙式差动压力传感器</p><h6 id="3-2-3差动式传感器优点-★"><a href="#3-2-3差动式传感器优点-★" class="headerlink" title="3.2.3差动式传感器优点 ★"></a>3.2.3差动式传感器优点 ★</h6><p>​        ①提高灵敏度</p><p>​        ②增大线性度</p><h5 id="3-3电容式传感器"><a href="#3-3电容式传感器" class="headerlink" title="3.3电容式传感器"></a>3.3电容式传感器</h5><h6 id="3-3-1原理-★"><a href="#3-3-1原理-★" class="headerlink" title="3.3.1原理 ★"></a>3.3.1原理 ★</h6><p>​        是将<strong>被测量（如尺寸、压力等）的变化转换成电容变化量</strong>的一种传感器。实际上，它本身（或和被测物）就是一个可变电容器。</p><h6 id="3-3-2工作原理-★"><a href="#3-3-2工作原理-★" class="headerlink" title="3.3.2工作原理 ★"></a>3.3.2工作原理 ★</h6><p>​        由绝缘介质分开的两个平行金属板组成的平板电容器, 如果不考虑边缘效应, 其电容量为</p><center><strong>C = ε · S / d</strong></center>​        当被测参数变化使得式中的S、d或ε发生变化时，电容量C也随之变化。如果保持其中两个参数不变，而仅改变其中一个参数，就可把该参数的变化转换为电容量的变化，通过测量电路就可转换为电量输出。因此，电容式传感器可分为**变极距型（d变化）**、**变面积型（S变化）**和**变介质型（ε变化）** 三种类型。<h6 id="3-3-3实例"><a href="#3-3-3实例" class="headerlink" title="3.3.3实例"></a>3.3.3实例</h6><p>​        <strong>指纹识别传感器</strong> / 电容层析成像系统 / 变间隙型电容传感器 / 变面积型电容传感器 / 电容液位计 / 电容式油量表</p><h5 id="3-4磁电式传感器–霍尔传感器"><a href="#3-4磁电式传感器–霍尔传感器" class="headerlink" title="3.4磁电式传感器–霍尔传感器"></a>3.4磁电式传感器–霍尔传感器</h5><h6 id="3-4-1原理-★"><a href="#3-4-1原理-★" class="headerlink" title="3.4.1原理 ★"></a>3.4.1原理 ★</h6><p>​        霍尔效应</p><h6 id="3-4-2实例"><a href="#3-4-2实例" class="headerlink" title="3.4.2实例"></a>3.4.2实例</h6><p>​        霍尔式微位移传感器 / 霍尔式转速传感器 / 霍尔式电流传感器 / 霍尔计数装置 / 霍尔式接近开关 / 霍尔式无刷电动机</p><h5 id="3-5压电式传感器"><a href="#3-5压电式传感器" class="headerlink" title="3.5压电式传感器"></a>3.5压电式传感器</h5><h6 id="3-5-1原理-★"><a href="#3-5-1原理-★" class="headerlink" title="3.5.1原理 ★"></a>3.5.1原理 ★</h6><p>​        基于<strong>某些介质材料的压电效应</strong>, 是典型的有源传感器。当<strong>材料受力作用而变形</strong>时, 其<strong>表面会有电荷产生</strong>，从而实现<strong>非电量测量</strong>。</p><h6 id="3-5-2实例"><a href="#3-5-2实例" class="headerlink" title="3.5.2实例"></a>3.5.2实例</h6><p>​        压电式加速度传感器 / 压电式测力传感器 / 压电式金属加工切削力测量 / <strong>压电式玻璃破碎报警器</strong> / 压电式周界报警系统</p><h5 id="3-6光电式传感器"><a href="#3-6光电式传感器" class="headerlink" title="3.6光电式传感器"></a>3.6光电式传感器</h5><h6 id="3-6-1原理-★"><a href="#3-6-1原理-★" class="headerlink" title="3.6.1原理 ★"></a>3.6.1原理 ★</h6><p>​        是以光电效应为基础，将光信号转换成电信号的传感器。</p><h6 id="3-6-2实例"><a href="#3-6-2实例" class="headerlink" title="3.6.2实例"></a>3.6.2实例</h6><p>​        照相机自动测光 / 工业测光  / 亮度传感器 / 光电鼠标 / <strong>烟雾报警器</strong> / <strong>红外辐射温度计</strong></p><h3 id="三-RFID（无线射频识别技术）"><a href="#三-RFID（无线射频识别技术）" class="headerlink" title="三.RFID（无线射频识别技术）"></a>三.RFID（无线射频识别技术）</h3><h4 id="1-RFID的原理"><a href="#1-RFID的原理" class="headerlink" title="1.RFID的原理"></a>1.RFID的原理</h4><h5 id="1-1原理-★"><a href="#1-1原理-★" class="headerlink" title="1.1原理 ★"></a>1.1原理 ★</h5><h6 id="1-1-1基本原理-★"><a href="#1-1-1基本原理-★" class="headerlink" title="1.1.1基本原理 ★"></a>1.1.1基本原理 ★</h6><p>​        <strong>标签</strong>进入<strong>读写器发射射频场</strong>后将<strong>天线获得的感应电流经升压电路后作为芯片的电源</strong>，将<strong>带信息的感应电流</strong>通过<strong>射频前端电路</strong>变为<strong>数字信号送入逻辑控制电路</strong>进行处理，需要<strong>回复的信息</strong>则从<strong>标签存储器发出</strong>，经<strong>逻辑控制电路送回射频前端电路</strong>。</p><h6 id="1-1-2相关原理-★"><a href="#1-1-2相关原理-★" class="headerlink" title="1.1.2相关原理 ★"></a>1.1.2相关原理 ★</h6><p>​        耦合：根据需求和成本可利用电磁波和磁感应</p><p>​        磁耦合：读取范围小、信息量较小</p><p>​        电磁波耦合：反向散射原理；读取范围可根据需求设定、信息量较大</p><h5 id="1-2应用实例"><a href="#1-2应用实例" class="headerlink" title="1.2应用实例"></a>1.2应用实例</h5><p>​        门禁控制 / 工业仓库库存跟踪 / 供应链集成 / 药品跟踪 / 枪支管理2</p><h4 id="2-RFID的组成-★"><a href="#2-RFID的组成-★" class="headerlink" title="2.RFID的组成 ★"></a>2.RFID的组成 ★</h4><h5 id="2-1硬件组成-★"><a href="#2-1硬件组成-★" class="headerlink" title="2.1硬件组成 ★"></a>2.1硬件组成 ★</h5><p>​        <strong>RFID标签</strong>、<strong>识读器</strong>、<strong>天线</strong>和<strong>主机</strong></p><h5 id="2-2软件组成-★"><a href="#2-2软件组成-★" class="headerlink" title="2.2软件组成 ★"></a>2.2软件组成 ★</h5><p>​        <strong>RFID系统软件</strong>、<strong>中间件</strong>和<strong>应用软件</strong></p><h4 id="3-RFID频段分布（什么环境下用什么频率的芯片）-★"><a href="#3-RFID频段分布（什么环境下用什么频率的芯片）-★" class="headerlink" title="3.RFID频段分布（什么环境下用什么频率的芯片） ★"></a>3.RFID频段分布（什么环境下用什么频率的芯片） ★</h4><table><thead><tr><th align="center">标准编号</th><th align="center">工作频率</th><th align="center">识别距离</th></tr></thead><tbody><tr><td align="center">ISO/IEC 18000-2</td><td align="center">125-135kHz</td><td align="center">&lt;=60cm</td></tr><tr><td align="center">ISO/IEC 18000-3</td><td align="center">13.56MHz</td><td align="center">~60cm</td></tr><tr><td align="center">ISO/IEC 18000-4</td><td align="center">2.45GHz</td><td align="center">1m以内~50m</td></tr><tr><td align="center">ISO/IEC 18000-5</td><td align="center">5.8GHz</td><td align="center">1m以内~50m</td></tr><tr><td align="center">ISO/IEC 18000-6</td><td align="center">860-950MHz</td><td align="center"><del>3.5m</del>50m~100m</td></tr><tr><td align="center">ISO/IEC 18000-6 part-c</td><td align="center">860-950MHz</td><td align="center"><del>3.5m</del>50m~100m</td></tr><tr><td align="center">ISO/IEC 18000-7</td><td align="center">433.92MHz</td><td align="center">50~100m</td></tr><tr><td align="center"><strong>ISO/IEC 14443</strong> ★</td><td align="center"><strong>13.56MHz</strong></td><td align="center"><strong>0~10cm</strong></td></tr><tr><td align="center">ISO/IEC 14536</td><td align="center">13.56MHz</td><td align="center">0~1cm</td></tr><tr><td align="center">ISO/IEC 15963</td><td align="center">13.56MHz</td><td align="center">0~100cm</td></tr></tbody></table><h4 id="4-EPC-★"><a href="#4-EPC-★" class="headerlink" title="4.EPC ★"></a>4.EPC ★</h4><h5 id="4-1G2标准的先进性"><a href="#4-1G2标准的先进性" class="headerlink" title="4.1G2标准的先进性"></a>4.1G2标准的先进性</h5><ol><li>标准更开放</li><li>尺寸更小，存储量增大、设置了安全口令</li><li>提供了各厂商产品的兼容性（和UID的兼容）</li><li><strong>设置了“灭活”指令</strong> ★</li><li>更广泛的频谱分布</li><li>识读器具有更高的读取率和读取速度（每秒可读1500个标签）</li></ol><h4 id="5-RFID的技术优点"><a href="#5-RFID的技术优点" class="headerlink" title="5.RFID的技术优点"></a>5.RFID的技术优点</h4><ol><li>读取方便快捷</li><li>识别速度快</li><li>动态实时通</li><li>更好的安全性</li><li>标签数据可动态更改</li><li>使用寿命长，应用范围广</li><li>数据容量大</li></ol><h4 id="6-UID的优点-★"><a href="#6-UID的优点-★" class="headerlink" title="6.UID的优点 ★"></a>6.UID的优点 ★</h4><p>​        不知道。。。。。。</p><h3 id="四-无线传感网络"><a href="#四-无线传感网络" class="headerlink" title="四.无线传感网络"></a>四.无线传感网络</h3><h4 id="1-无线传感网络（WSN）的定义-★"><a href="#1-无线传感网络（WSN）的定义-★" class="headerlink" title="1.无线传感网络（WSN）的定义 ★"></a>1.无线传感网络（WSN）的定义 ★</h4><p>​        无线传感器网络(WSN)是<strong>大量</strong>的静止或移动的<strong>传感器</strong>以<strong>自组织</strong>和<strong>多跳</strong>的方式构成的无线网络，目的是协作地<strong>采集</strong>、<strong>处理</strong>和<strong>传输</strong>网络覆盖地域内感知对象的<strong>监测信息</strong>，并报告给用户。</p><h4 id="2-网络传感节点的组成-★"><a href="#2-网络传感节点的组成-★" class="headerlink" title="2.网络传感节点的组成 ★"></a>2.网络传感节点的组成 ★</h4><p>​                                                <strong>传感模块        计算模块        通信模块</strong></p><p>​                                                电源模块        <strong>存贮模块</strong>        嵌入式系统</p><h4 id="3-传感器节点的限制-★"><a href="#3-传感器节点的限制-★" class="headerlink" title="3.传感器节点的限制 ★"></a>3.传感器节点的限制 ★</h4><ul><li>电源能量有限（能耗图） ★</li></ul><img src="https://i.loli.net/2020/09/16/PF4DyY1hu3cANQm.png" style="zoom:50%;"><ul><li><p>通信能力受限（通信距离与能耗的关系） ★</p><p>通常无线通信的<strong>能量消耗与通信距离的关系</strong>符合如下规律：</p></li></ul><p>$$<br>E = k × d^n<br>$$</p><p>​        参数n满足关系<strong>2 &lt; n &lt; 4</strong></p><ul><li>计算和存储能力受限</li></ul><h3 id="五-WSN路由协议"><a href="#五-WSN路由协议" class="headerlink" title="五.WSN路由协议"></a>五.WSN路由协议</h3><h4 id="1-路由的性质-★"><a href="#1-路由的性质-★" class="headerlink" title="1.路由的性质 ★"></a>1.路由的性质 ★</h4><img src="https://i.loli.net/2020/09/16/Wc4JyMD2XEGT1P3.jpg" style="zoom:80%;"><p><strong>a)单播</strong>                                <strong>b)广播</strong>                                <strong>c)多播</strong>                                <strong>d)任播</strong>                                <strong>e) k-任播</strong></p><h4 id="2-从具体应用分类"><a href="#2-从具体应用分类" class="headerlink" title="2.从具体应用分类"></a>2.从具体应用分类</h4><h5 id="2-1能量感知路由协议-★"><a href="#2-1能量感知路由协议-★" class="headerlink" title="2.1能量感知路由协议 ★"></a>2.1能量感知路由协议 ★</h5><h6 id="2-1-1特点"><a href="#2-1-1特点" class="headerlink" title="2.1.1特点"></a>2.1.1特点</h6><p>​        从数据传输中的<strong>能量消耗</strong>出发，讨论<strong>最优能量消耗路径</strong>以及<strong>最长网络生存周期</strong>。</p><h6 id="2-1-2路由方式"><a href="#2-1-2路由方式" class="headerlink" title="2.1.2路由方式"></a>2.1.2路由方式</h6><p>​        根据节点的<strong>可用能量（PA）</strong>或传输<strong>路径上的能量需求</strong>进行数据转发。</p><h6 id="2-1-3转发示意"><a href="#2-1-3转发示意" class="headerlink" title="2.1.3转发示意"></a>2.1.3转发示意</h6><img src="https://i.loli.net/2020/09/16/RYDc4LUXq5WorzS.png" style="zoom:50%;"><ul><li>路径1：源节点→B→A→汇聚节点，<strong>PA之和</strong>为：4，<strong>转发分组需要能量之和</strong>为：3</li><li>路径2：源节点→C→B→A→汇聚节点，<strong>PA之和</strong>为：6，<strong>转发分组需要能量之和</strong>为：5</li><li>路径3：源节点→D→汇聚节点，<strong>PA之和</strong>为：3，<strong>转发分组需要能量之和</strong>为：4</li><li>路径4：源节点→F→E→汇聚节点，<strong>PA之和</strong>为：5，<strong>转发分组需要能量之和</strong>为：6</li></ul><h6 id="2-1-4路由策略分析-10‘-★"><a href="#2-1-4路由策略分析-10‘-★" class="headerlink" title="2.1.4路由策略分析 10‘ ★"></a>2.1.4路由策略分析 10‘ ★</h6><ol><li><strong>最大PA路由</strong>：路径2的<strong>PA之和最大（为6）</strong>，但<strong>包含了路径1</strong>，不是最优解，应选择路径4</li><li><strong>最小能量消耗路由</strong>：路径1<strong>能量消耗最小（为3）</strong></li><li><strong>最少跳数路由</strong>：选择从源到汇聚节点的最小跳数<strong>路径，选择路径3（跳数为2）</strong></li><li><strong>最大最小PA节点路由</strong>：路径上每个节点的可用能量不同，从中<strong>选取每条路径中最小能量的节点表示这条路径的可用能量</strong>，最大最小路径就是<strong>选择可用能量最大的路径</strong>。选择路径3（为3）</li></ol><h6 id="2-1-5能量路由算法分析-14’-★"><a href="#2-1-5能量路由算法分析-14’-★" class="headerlink" title="2.1.5能量路由算法分析 14’ ★"></a>2.1.5能量路由算法分析 14’ ★</h6><ul><li>较好的解决了能量均衡问题，延长了网络生存周期。</li><li>算法的收敛性较好</li><li>网络负载未必均衡</li><li>节点需要知道全局网络信息，但WSN资源约束，节点只能获得局部网络信息。</li></ul><h5 id="2-2基于查询的路由协议-由上而下"><a href="#2-2基于查询的路由协议-由上而下" class="headerlink" title="2.2基于查询的路由协议 (由上而下)"></a>2.2基于查询的路由协议 (由上而下)</h5><h6 id="2-2-1定向扩散路由-5’-★"><a href="#2-2-1定向扩散路由-5’-★" class="headerlink" title="2.2.1定向扩散路由 5’ ★"></a>2.2.1定向扩散路由 5’ ★</h6><ol><li><strong>路由方式</strong>：<strong>汇聚节点</strong>向全网<strong>发出兴趣消息的查询任务</strong>→兴趣<strong>在全网中扩散</strong>→<strong>逐跳</strong>在节点上<strong>反向建立从数据源到汇聚节点的数据传输梯度</strong>→将<strong>采集数据沿梯度方向传送到汇聚节点</strong>→汇聚节点<strong>向数据到达最快的邻节点发送增强消息</strong>，相应节点按同样方式，依次传递增强消息给其邻节点，直到到达数据源，据此构建数据发送的主路径。</li><li>示意图<img src="https://i.loli.net/2020/09/16/6kwN2A5J8vqSlga.png" style="zoom:80%;"></li></ol><h6 id="2-2-2谣传路由-2‘-★"><a href="#2-2-2谣传路由-2‘-★" class="headerlink" title="2.2.2谣传路由 2‘ ★"></a>2.2.2谣传路由 2‘ ★</h6><ol><li><strong>路由方式</strong>：<strong>传感器节点</strong>（数据源节点）发送的<strong>代理消息</strong>沿<strong>随机路径向外扩散传播</strong>，<strong>汇聚节点</strong>发送的<strong>查询消息</strong>也<strong>随机在网络中传播</strong>。</li><li><strong>具体工作原理</strong>：阅PPT《物联网讲座05-WSN路由协议》P36</li></ol><h5 id="2-3地理位置路由协议–GEAR路由协议"><a href="#2-3地理位置路由协议–GEAR路由协议" class="headerlink" title="2.3地理位置路由协议–GEAR路由协议"></a>2.3地理位置路由协议–GEAR路由协议</h5><h6 id="2-3-1路由空洞问题-2’-★"><a href="#2-3-1路由空洞问题-2’-★" class="headerlink" title="2.3.1路由空洞问题 2’ ★"></a>2.3.1路由空洞问题 2’ ★</h6><ol><li>邻界点传输代价都比本地节点传输代价大</li><li>解决方式：①选择邻节点中代价最小的作为转发节点；②选择距离目标节点距离小的作为转发节点</li><li>如何<strong>绕开路由空洞</strong>：修改本地转发协议</li></ol><h6 id="2-3-2GEAR路由评价-10‘-★"><a href="#2-3-2GEAR路由评价-10‘-★" class="headerlink" title="2.3.2GEAR路由评价 10‘ ★"></a>2.3.2GEAR路由评价 10‘ ★</h6><p>​    优点：</p><p>​        利用了位置信息，避免了查询消息的Flooding；</p><p>​        考虑了消耗的能量和节点剩余能量，均衡消息；</p><p>​        路径选择可达到局部最优；</p><p>​        迭代地理转发对洪泛机制的补充；</p><p>​    缺点：</p><p>​        可能出现路由空洞（局部信息）- 两跳信息；</p><p>​        不适合在移动WSN使用</p><h5 id="2-4地理位置路由协议–GPSR路由协议（外围贪婪无状态路由）10’"><a href="#2-4地理位置路由协议–GPSR路由协议（外围贪婪无状态路由）10’" class="headerlink" title="2.4地理位置路由协议–GPSR路由协议（外围贪婪无状态路由）10’"></a>2.4地理位置路由协议–GPSR路由协议（外围贪婪无状态路由）10’</h5><h6 id="2-4-1路由方式"><a href="#2-4-1路由方式" class="headerlink" title="2.4.1路由方式"></a>2.4.1路由方式</h6><ol><li>节点S需要向节点D转发数据分组，首先<strong>在S的所有邻节点中选择一个距节点D最近的节点作为数据分组的下一跳</strong>，然后将数据传送给它；</li><li>重复该过程，直到数据分组到达目的节点D或某个最佳节点。</li></ol><h6 id="2-4-2路由空洞-★"><a href="#2-4-2路由空洞-★" class="headerlink" title="2.4.2路由空洞 ★"></a>2.4.2路由空洞 ★</h6><p>​        如果<strong>当前节点到目的节点的距离大于邻居节点到目的节点的距离</strong>，一般采用<strong>贪婪转发</strong>方式，<strong>否则就用周边转发</strong>方式。执行贪婪转发时数据可能会到达“不存在比该节点更接近目的节点的区域”也就是常说的“<strong>路由空洞</strong>”，那么数据就会无法继续传播下去。</p><h6 id="2-4-3路由空洞的解决-★"><a href="#2-4-3路由空洞的解决-★" class="headerlink" title="2.4.3路由空洞的解决 ★"></a>2.4.3路由空洞的解决 ★</h6><img src="https://i.loli.net/2020/09/16/bfITv9jVehZYGB3.png" style="zoom:71%;"><ol><li>节点x向D发送数据，而节点x到D的距离小于节点w和y到D的距离。</li><li>对网络进行平面化处理后，GPSR协议需删掉交叉边生成<strong>RNG</strong>或<strong>GG</strong>子图。</li><li>遇到路由空洞，采用<strong>边界转发方式</strong>，运用<strong>右手法则</strong>绕过路由空洞沿其周围节点传送数据。</li><li>当数据到达节点与目的节点间的距离小于空洞起始节点至目的节点的距离的节点时，则<strong>转为贪婪转发方式</strong>。</li></ol><h6 id="2-4-4图解"><a href="#2-4-4图解" class="headerlink" title="2.4.4图解"></a>2.4.4图解</h6><p><strong>边界转发</strong>：★</p><img src="https://i.loli.net/2020/09/16/pHGQ3rFcuxMNYPv.png" style="zoom:75%;"><p>数据包从节点x通过face边界向目的节点D转发，这些<strong>face都被xD穿越</strong>；转发边的选择采用<strong>右手法则</strong>；当碰到与xD相交的边时，进行face切换，进入下一个face</p><p><strong>右手法则</strong>：</p><img src="https://i.loli.net/2020/09/16/792nrgPORf4KDHu.png" style="zoom:75%;"><p>下一条边的选择：下一边是以x为定点，沿(x，y)<strong>顺时针</strong>方向上的第一条边，图中为(x，z)</p><p><strong>十分图</strong>：10‘ ★</p><img src="https://i.loli.net/2020/09/16/JcF6CEpHIyg5tws.png" style="zoom:75%;"><p>左边：<strong>无线通信网络全图</strong>，未做任何处理（200个节点 on 2000m×2000m，无线电测距250m）</p><p>中间：全图的<strong>GG子集</strong>（经GG算法处理结果）</p><p>右边：全图的<strong>RNG子集</strong>（经RNG算法处理结果）</p><h3 id="六-WSN-MAC（介质访问控制）协议"><a href="#六-WSN-MAC（介质访问控制）协议" class="headerlink" title="六.WSN-MAC（介质访问控制）协议"></a>六.WSN-MAC（介质访问控制）协议</h3><h4 id="1-WSN-MAC协议的三种类别-★"><a href="#1-WSN-MAC协议的三种类别-★" class="headerlink" title="1.WSN-MAC协议的三种类别 ★"></a>1.WSN-MAC协议的三种类别 ★</h4><ul><li><strong>时分复用无竞争接入方式（分配型）</strong>。无线信道时分复用（Time Division Multiple Access，TDMA）方式给<strong>每个传感器节点分配固定的无线信道使用时段</strong>，避免节点之间相互干扰。</li><li><strong>随机竞争接入方式（竞争型）</strong>。如果采用无线信道的随机竞争接入方式，<strong>节点在需要发送数据时随机使用无线信道</strong>，尽量减少节点间的干扰。典型的方法是采用<strong>载波侦听多路访问</strong>（Carrier Sense Multiple Access，<strong>CSMA</strong>）的MAC协议。</li><li><strong>竞争与固定分配相结合的接入方式（混合型）</strong>。通过混合采用频分复用或者码分复用等方式，实现<strong>节点间无冲突的无线信道分配</strong>。</li></ul><h4 id="2-CSMA-CA协议（带冲突避免的载波侦听多路访问）★"><a href="#2-CSMA-CA协议（带冲突避免的载波侦听多路访问）★" class="headerlink" title="2.CSMA/CA协议（带冲突避免的载波侦听多路访问）★"></a>2.CSMA/CA协议（带冲突避免的载波侦听多路访问）★</h4><p>​        基于竞争的无线网络MAC协议的典型代表。</p><p>​        所谓的CSMA/CA机制是指<strong>在信号传输之前，发射机先侦听介质中是否有同信道载波</strong>，若<strong>不存在，意味着信道空闲，将直接进入数据传输状态</strong>；若<strong>存在载波，则在随机退避一段时间后重新检测信道</strong>。这种介质访问控制层的方案简化了实现自组织网络应用的过程。**</p><h4 id="3-IEEE-802-11-MAC协议"><a href="#3-IEEE-802-11-MAC协议" class="headerlink" title="3.IEEE 802.11 MAC协议"></a>3.IEEE 802.11 MAC协议</h4><h5 id="3-1三种基本帧间间隔（InterFrame-Space，IFS）"><a href="#3-1三种基本帧间间隔（InterFrame-Space，IFS）" class="headerlink" title="3.1三种基本帧间间隔（InterFrame Space，IFS）"></a>3.1三种基本帧间间隔（InterFrame Space，IFS）</h5><ol><li><strong>SIFS</strong>（Short IFS）：最短帧间间隔。1‘ ★</li><li><strong>PIFS</strong>（PCF IFS）：PCF方式下节点使用的帧间间隔。</li><li><strong>DIFS</strong>（DCF IFS）：DCF方式下节点使用的帧间间隔。</li></ol><h5 id="3-2原理-5’-★"><a href="#3-2原理-5’-★" class="headerlink" title="3.2原理 5’ ★"></a>3.2原理 5’ ★</h5><p>​        通过立即<strong>主动确认机制</strong>和<strong>预留机制</strong>提高性能。</p><p>​        在主动确认机制中，当目标节点收到一个发送给它的有效数据帧（DATA）时，必须向源节点发送一个应答帧（ACK），确认数据已被正确接收到。为了保证目标节点在发送ACK过程中不与其它节点发生冲突，目标节点使用SIFS帧间隔。主动确认机制只能用于有明确目标地址的帧，不能用于组播和广播报文传输。</p><p>​                                                <img src="https://i.loli.net/2020/09/16/UsjuBbZNfnM3Hmi.png" style="zoom:48%;"></p><h4 id="4-S-MAC"><a href="#4-S-MAC" class="headerlink" title="4.S-MAC"></a>4.S-MAC</h4><h5 id="4-1基本思想-5‘-★"><a href="#4-1基本思想-5‘-★" class="headerlink" title="4.1基本思想 5‘ ★"></a>4.1基本思想 5‘ ★</h5><ul><li>周期性睡眠和监听 ；协商一致的睡眠调度机制（虚拟簇）；</li><li>自适应的侦听机制，减少信息的传输延迟；</li><li>带内信令来减少重传和避免监听不必要的数据；</li><li>消息分割和突发传递机制来减少控制信息的开销和消息的传递延迟。</li></ul><h4 id="5-T-MAC"><a href="#5-T-MAC" class="headerlink" title="5.T-MAC"></a>5.T-MAC</h4><h5 id="5-1基本思想-5’-★"><a href="#5-1基本思想-5’-★" class="headerlink" title="5.1基本思想 5’ ★"></a>5.1基本思想 5’ ★</h5><ul><li><p>SMAC协议调度占空比固定，不能很好的适应网络流量的变化；</p></li><li><p>动态调整调度周期中的活跃时间长度；</p></li><li><p>在TA时间内没有发生激活事件则进入睡眠。</p><img src="https://i.loli.net/2020/09/16/awH8reEj6BugkCK.png" style="zoom:50%;"></li></ul><h5 id="5-2早睡问题-5‘-★"><a href="#5-2早睡问题-5‘-★" class="headerlink" title="5.2早睡问题 5‘ ★"></a>5.2早睡问题 5‘ ★</h5><p>​        邻居在准备向其发送数据时进入了睡眠状态</p><img src="https://i.loli.net/2020/09/16/Hcwf2OYtXnI1Lmr.png" style="zoom:50%;"><p>​        解决方法：①未来请求发送；②满缓冲区优先。</p><h3 id="七-ZIGBEE"><a href="#七-ZIGBEE" class="headerlink" title="七.ZIGBEE"></a>七.ZIGBEE</h3><h4 id="1-什么是ZigBee-★"><a href="#1-什么是ZigBee-★" class="headerlink" title="1.什么是ZigBee ★"></a>1.什么是ZigBee ★</h4><p>​        ZigBee技术是一种<strong>近距离</strong>、<strong>低复杂度</strong>、<strong>低功耗</strong>、<strong>低速率</strong>、<strong>低成本</strong>的<strong>双向无线通讯技术</strong>。早期也被称为 “HomeRF Lite”、“RF- EasyLink”或“fireFly”无线电技术，目前统称为ZigBee技术。</p><h4 id="2-ZigBee功能节点-3‘-★"><a href="#2-ZigBee功能节点-3‘-★" class="headerlink" title="2.ZigBee功能节点 3‘ ★"></a>2.ZigBee功能节点 3‘ ★</h4><ul><li><strong>协调器</strong> ★    <em>描述</em>：①全功能设备（FFD）②存储容量大、计算能力强    <em>功能</em>：①发送网络信标 ②建立一个PAN ③管理网络节点 ④存储网络节点信息 ⑤寻找节点路由信息</li><li><strong>路由器</strong> ★   <em>描述</em>：①全功能设备（FFD）②通常全时间处于活动状态    <em>功能</em>：①允许其他设备加入网络 ②跳跃路由 ③辅助子设备供电</li><li><strong>终端设备</strong> ★   <em>描述</em>：①半功能设备（RFD）②自由选择睡眠和唤醒    <em>功能</em>：①传感节点的载体 ②轻载化程序设计</li></ul><h4 id="3-ZigBee-802-15-4网络拓扑-2’-★"><a href="#3-ZigBee-802-15-4网络拓扑-2’-★" class="headerlink" title="3.ZigBee/802.15.4网络拓扑 2’ ★"></a>3.ZigBee/802.15.4网络拓扑 2’ ★</h4><p>​        采用星型结构不需要使用网络层协议。簇型结构中路由只有唯一的通路，路由对应用层完全是透明的。</p><p>​                                                                                   <img src="https://i.loli.net/2020/09/16/t5bNufS1nzEGkT8.png" style="zoom:48%;"></p><hr><p><strong>星形拓扑</strong>                                                                        <img src="https://i.loli.net/2020/09/16/zIjuEsYVn2bWMBL.png" style="zoom:48%;"></p><hr><p><strong>树形拓扑</strong>                                                                      <img src="https://i.loli.net/2020/09/16/7rJvl3dSGWgeEpt.png" style="zoom:48%;"></p><hr><p><strong>网状拓扑</strong>                                                                     <img src="https://i.loli.net/2020/09/16/1qMsRCmoYkjGFAT.png" style="zoom:48%;"></p><h4 id="4-ZigBee的两种模式-★"><a href="#4-ZigBee的两种模式-★" class="headerlink" title="4.ZigBee的两种模式 ★"></a>4.ZigBee的两种模式 ★</h4><h5 id="4-1信标模式"><a href="#4-1信标模式" class="headerlink" title="4.1信标模式"></a>4.1信标模式</h5><p>​        信标模式采用竞争和分配的混合性信道接入模式</p><h5 id="4-2非信标模式"><a href="#4-2非信标模式" class="headerlink" title="4.2非信标模式"></a>4.2非信标模式</h5><p>​        非信标模式采用CSMA/CA</p><h4 id="5-信标、超帧及其结构-10‘-★"><a href="#5-信标、超帧及其结构-10‘-★" class="headerlink" title="5.信标、超帧及其结构 10‘ ★"></a>5.信标、超帧及其结构 10‘ ★</h4><ul><li><strong>超帧</strong>包含<strong>活动部分</strong>和<strong>非活动部分</strong>（是一个时间概念），超帧<strong>以一个信标的开始为开始</strong>，<strong>信标定义超帧结构</strong></li><li><strong>CAP为自由竞争阶段</strong>、<strong>CFP为非竞争阶段</strong>、CFP内可以保证<strong>GTS（保证时隙）</strong>的传送</li><li><strong>信标</strong>是<strong>子设备同步父设备的标记</strong></li></ul><img src="https://i.loli.net/2020/09/16/jWP5KORGYUfHAyk.png" style="zoom:48%;">]]></content>
      
      
      
        <tags>
            
            <tag> 复习 </tag>
            
            <tag> 物联网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工程经济学</title>
      <link href="2020/11/22/%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
      <url>2020/11/22/%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="工程经济学"><a href="#工程经济学" class="headerlink" title="工程经济学"></a>工程经济学</h2><h2 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h2><h4 id="基本名词概念"><a href="#基本名词概念" class="headerlink" title="基本名词概念"></a><strong>基本名词概念</strong></h4><p><strong>工程经济学:</strong></p><p>研究工程与经济相结合的发展规律的学科，它以工程-经济系统为客体，以实现工程中资源的合理配置和有效使用，提高工程有效性为目的。 </p><p><strong>资金的时间价值学:</strong></p><p>资金在社会再生产过程中随着时间推移而产生的增值。 </p><a id="more"></a><p><strong>净现值:</strong></p><p>​         指建设项目在整个寿命周期内，各年的净现金流按既定的折现率折算到计算期初的现值之和，净现值是考查建设项目在其计算期内盈利能力的主要动态评价指标。 </p><p><strong>财务评价:</strong></p><p>​         财务评价又称企业经济评价，根据现行国家财税制度  和价格体系，分析、计算项目的直接效益和直接费用，以考查项目的盈利能力、清偿能力和财务生存能力等财务状况，据以判别项目的财务可行性。 </p><p> <strong>利息：</strong>是指占用资金应付出的代价或者放弃资金的使用权应得的补偿。 </p><p> <strong>建设期利息：</strong></p><p>​        指因筹措债务资金而在建设期发生的，并按规定允许在项目实施后计入固定资产原值的利息，在建设期的长期 借款所产生的利息，在运营期偿还时不能计入建设期利息。 </p><p><strong>利息备付率：</strong></p><p>​        也称已获利息倍数，是指项目在借款偿还期内，各年可用于支付利息的息税前利润与计入成本的应付利息的比值，判别项目有偿还利息的能力，其值理论上应大于1实际不低于2。 </p><p><strong>偿债备付率：</strong></p><p>​        是指在借款偿还期内，各年可用于还本付息的资金与当年应还本付息额的比值，判别项目偿还本息的能力，理论上要大于1实际上不低于1.3 </p><p><strong>个人资本金：</strong></p><p>​        是指社会个人或者单位内部职工以个人合法财产投入建设项目而形成的资本金。 </p><p><strong>外部效果：</strong></p><p>​        是指建设项目间接效益和间接费用的统称，是由于项目实施所导致的在项目之外未计入项目直接效益与直接费用的效果。</p><p><strong>名义利率：</strong></p><p>​        是央行或其他提供资金贷款的机构所公布的未调整通货膨胀因素的利率，即利息的货币额与本金的货币额的比率。 </p><p><strong>影子价格：</strong></p><p>​        又称最优计划价格或计算价格。它是指依据一定原则确定的，能够反映投入物和产出物真实经济价值、反映市场供求关系状况、反映资源稀缺程度、使资源得到合理配置的价格。影子价格反映了社会经济处于某种最优状态下的资源稀缺程度和对最终产品的需求情况，有利于资源的最优配置。 </p><p> <strong>项目不确定性：</strong></p><p>​        是指对于项目未来经济状况的分布范围和状态不能确知的性质。</p><p><strong>投资回收期：</strong></p><p>​        也称返本期，是指从项目投资开始算起，用项目投产后的收益回收全部投资所需的时间长度，反映盈利能力。 </p><p><strong>盈亏平衡分析：</strong></p><p>​        是指根据项目产量、成本和利润之间的经济数量关系，通过分析项目的盈亏平衡点，考查项目对运营状态变化的适应能力、承受能力和抵御风险能力，是评价项目财务可靠性的不确定性分析方法</p><p><strong>全面价值管理：</strong></p><p>​        是以产品价值管理为基础，以顾客价值创造为手段，以企业社会价值提升与可持续发展为理念，以建立价值创造型企业为目标，谋求企业价值最大化创造的管理模式。 </p><p><strong>税收:</strong></p><p>​        税收是指国家为了向社会提供公共产品、满足社会共同需要、按照法律的规定，参与<a href="https://baike.baidu.com/item/%E7%A4%BE%E4%BC%9A%E4%BA%A7%E5%93%81/3304007">社会产品</a>的分配、强制、无偿取得财政收入的一种规范形式。税收是一种非常重要的政策工具。 </p><p><strong>项目外部效果：</strong></p><p>​        间接经济效益与间接经济费用，是指项目对国民经济作出的贡献与国民经济为项目付出的代价中，在直接效益与直接费用中未得到反映那部分效益与费用。类型包括：1产业关联效果2环境和生态效果。3技术扩散效果。</p><hr><h4 id="项目融资"><a href="#项目融资" class="headerlink" title="项目融资"></a><strong>项目融资</strong></h4><p>1、BOT模式</p><ul><li>BOT 实质上是基础设施投资、建设和经营的一种方式，以政府和私人机构之间达成协议为前提，由政府向私人机构颁布特许，允许其在一定时期内筹集资金建设某一基础设施并管理和经营该设施及其相应的产品与服务。</li></ul><p>2、PPP模式</p><ul><li>通常译为“公共私营合作制”，是指政府与私人组织之间，合作建设城市基础设施项目。</li><li>或是为了提供某种公共物品和服务， 以特许权协议为基础，彼此之间形成一种伙伴式的合作关系，并通过签署合同来明确双方的权利和义务，以确保合作的顺利完成，最终使合作各方达到比预期单独行动更为有利的结果。</li></ul><p>3、PFI模式</p><p>•PFI(Private Finance Initiative)，英文原意为“私人融资活动”，在我国被译为“民间主动融资”，是<a href="https://link.zhihu.com/?target=https://baike.baidu.com/item/%E8%8B%B1%E5%9B%BD/144602">英国</a>政府于1992年提出的，在一些西方发达国家逐步兴起的一种新的<a href="https://link.zhihu.com/?target=https://baike.baidu.com/item/%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E6%8A%95%E8%B5%84/5749276">基础设施投资</a>、建设和运营<a href="https://link.zhihu.com/?target=https://baike.baidu.com/item/%E7%AE%A1%E7%90%86%E6%A8%A1%E5%BC%8F">管理模式</a>。</p><p>•PFI是对BOT项目融资的优化，指政府部门根据社会对基础设施的需求，提出需要建设的项目，通过招投标，由获得特许权的私营部门进行公共基础设施项目的建设与运营，并在特许期（通常为30年左右）结束时将所经营的项目完好地、无债务地归还政府，而私营部门则从政府部门或接受服务方收取费用以回收成本的项目融资方式。</p><p>4、ABS模式</p><ul><li>ABS融资模式是以项目所属的资产为支撑的证券化<a href="https://link.zhihu.com/?target=https://baike.baidu.com/item/%E8%9E%8D%E8%B5%84%E6%96%B9%E5%BC%8F/6756751">融资方式</a>，即以项目所拥有的资产为基础，以项目资产可以带来的预期收益为保证，通过在资本市场<a href="https://link.zhihu.com/?target=https://baike.baidu.com/item/%E5%8F%91%E8%A1%8C%E5%80%BA%E5%88%B8/4022363">发行债券</a>来募集资金的一种项目融资方式。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 复习 </tag>
            
            <tag> 经济学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>马原论文</title>
      <link href="2020/11/22/%E9%A9%AC%E5%8E%9F%E8%AE%BA%E6%96%87/"/>
      <url>2020/11/22/%E9%A9%AC%E5%8E%9F%E8%AE%BA%E6%96%87/</url>
      
        <content type="html"><![CDATA[<h2 id="马原期末论文"><a href="#马原期末论文" class="headerlink" title="马原期末论文"></a>马原期末论文</h2><h3 id="试论马克思主义当代价值"><a href="#试论马克思主义当代价值" class="headerlink" title="试论马克思主义当代价值"></a>试论马克思主义当代价值</h3><ul><li>关键词：马克思主义，基本原理，当代价值 </li></ul><p><em>选题背景</em></p><p>​        首先，马克思主义自诞生以来在世界上产生了巨大的影响，尤其是中国，时代在变化，社会在发展，但马克思主义基本原理依然是科学的真理。其次，在中国共产党第十九次全国代表大会上习近平总书记首次提出的“新时代中国特色社会主义思想”中提及了有关和谐社会的内容。并且实践的观点是马克思主义哲学首要的和基本的观</p><a id="more"></a><p>点，实践的原则是马克思主义哲学的建构原则。此外，前不久召开的中共中央政治局民主生活会明确提出：“习近平新时代中国特色社会主义思想，是我们党理论创新的最新成果，是当代中国的马克思主义、21世纪的马克思主义。”这一论断深刻揭示，习近平新时代中国特色社会主义思想是马克思主义中国化的新飞跃，是21世纪马克思主义的新形态，开辟了马克思主义创新发展的新境界。</p><p><em>选题意义</em></p><p>​         习近平新时代中国特色社会主义思想和马克思主义基本原理、马克思主义中国化的其他理论成果虽然形成于不同的历史时期、致力于解答不同的时代课题，但都站在相同的政治立场上，具有相同的理论基础、理论精髓、理论品质和价值理想，是一脉相承的科学理论谱系。我们要在习近平新时代中国特色社会主义思想的指引下，对资本主义结构性矛盾以及生产方式矛盾、阶级矛盾、社会矛盾等进行批判性揭示，对资本主义危机、资本主义演进过程、资本主义新形态及本质进行深入分析，从而正确认识资本主义发展趋势和命运，准确把握当代资本主义新变化新特征。  </p>]]></content>
      
      
      
        <tags>
            
            <tag> 论文 </tag>
            
            <tag> 马克思主义 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
